// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/virtualmachine.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VirtualMachineHost with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineHost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineHost with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachineHostMultiError, or nil if none found.
func (m *VirtualMachineHost) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineHost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return VirtualMachineHostMultiError(errors)
	}

	return nil
}

// VirtualMachineHostMultiError is an error wrapping multiple validation errors
// returned by VirtualMachineHost.ValidateAll() if the designated constraints
// aren't met.
type VirtualMachineHostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineHostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineHostMultiError) AllErrors() []error { return m }

// VirtualMachineHostValidationError is the validation error returned by
// VirtualMachineHost.Validate if the designated constraints aren't met.
type VirtualMachineHostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineHostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineHostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineHostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineHostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineHostValidationError) ErrorName() string {
	return "VirtualMachineHostValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineHostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineHost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineHostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineHostValidationError{}

// Validate checks the field values on VirtualMachineResourceMetrics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineResourceMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineResourceMetrics with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VirtualMachineResourceMetricsMultiError, or nil if none found.
func (m *VirtualMachineResourceMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineResourceMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuUsage

	// no validation rules for MemeryUsage

	if len(errors) > 0 {
		return VirtualMachineResourceMetricsMultiError(errors)
	}

	return nil
}

// VirtualMachineResourceMetricsMultiError is an error wrapping multiple
// validation errors returned by VirtualMachineResourceMetrics.ValidateAll()
// if the designated constraints aren't met.
type VirtualMachineResourceMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineResourceMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineResourceMetricsMultiError) AllErrors() []error { return m }

// VirtualMachineResourceMetricsValidationError is the validation error
// returned by VirtualMachineResourceMetrics.Validate if the designated
// constraints aren't met.
type VirtualMachineResourceMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineResourceMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineResourceMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineResourceMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineResourceMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineResourceMetricsValidationError) ErrorName() string {
	return "VirtualMachineResourceMetricsValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineResourceMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineResourceMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineResourceMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineResourceMetricsValidationError{}

// Validate checks the field values on VirtualMachineNetwork with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineNetwork) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineNetwork with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachineNetworkMultiError, or nil if none found.
func (m *VirtualMachineNetwork) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineNetwork) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IpsName

	// no validation rules for Network

	// no validation rules for Interface

	// no validation rules for Ip

	// no validation rules for Mac

	// no validation rules for Subnet

	// no validation rules for Vpc

	// no validation rules for Multus

	// no validation rules for Default

	if len(errors) > 0 {
		return VirtualMachineNetworkMultiError(errors)
	}

	return nil
}

// VirtualMachineNetworkMultiError is an error wrapping multiple validation
// errors returned by VirtualMachineNetwork.ValidateAll() if the designated
// constraints aren't met.
type VirtualMachineNetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineNetworkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineNetworkMultiError) AllErrors() []error { return m }

// VirtualMachineNetworkValidationError is the validation error returned by
// VirtualMachineNetwork.Validate if the designated constraints aren't met.
type VirtualMachineNetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineNetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineNetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineNetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineNetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineNetworkValidationError) ErrorName() string {
	return "VirtualMachineNetworkValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineNetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineNetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineNetworkValidationError{}

// Validate checks the field values on VirtualMachineDisk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineDisk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineDisk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachineDiskMultiError, or nil if none found.
func (m *VirtualMachineDisk) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineDisk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Capacity

	// no validation rules for Status

	// no validation rules for AccessMode

	// no validation rules for StorageClassName

	// no validation rules for Rootfs

	// no validation rules for Mounted

	if len(errors) > 0 {
		return VirtualMachineDiskMultiError(errors)
	}

	return nil
}

// VirtualMachineDiskMultiError is an error wrapping multiple validation errors
// returned by VirtualMachineDisk.ValidateAll() if the designated constraints
// aren't met.
type VirtualMachineDiskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineDiskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineDiskMultiError) AllErrors() []error { return m }

// VirtualMachineDiskValidationError is the validation error returned by
// VirtualMachineDisk.Validate if the designated constraints aren't met.
type VirtualMachineDiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineDiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineDiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineDiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineDiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineDiskValidationError) ErrorName() string {
	return "VirtualMachineDiskValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineDiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineDisk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineDiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineDiskValidationError{}
