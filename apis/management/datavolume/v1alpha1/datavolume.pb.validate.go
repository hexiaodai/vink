// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/datavolume/v1alpha1/datavolume.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DataVolumeConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DataVolumeConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataVolumeConfigMultiError, or nil if none found.
func (m *DataVolumeConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Disk

	if all {
		switch v := interface{}(m.GetOsFamily()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataVolumeConfigValidationError{
					field:  "OsFamily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataVolumeConfigValidationError{
					field:  "OsFamily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsFamily()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataVolumeConfigValidationError{
				field:  "OsFamily",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataVolumeConfigValidationError{
					field:  "DataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataVolumeConfigValidationError{
					field:  "DataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataVolumeConfigValidationError{
				field:  "DataSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBoundPvc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataVolumeConfigValidationError{
					field:  "BoundPvc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataVolumeConfigValidationError{
					field:  "BoundPvc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBoundPvc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataVolumeConfigValidationError{
				field:  "BoundPvc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataVolumeConfigMultiError(errors)
	}

	return nil
}

// DataVolumeConfigMultiError is an error wrapping multiple validation errors
// returned by DataVolumeConfig.ValidateAll() if the designated constraints
// aren't met.
type DataVolumeConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfigMultiError) AllErrors() []error { return m }

// DataVolumeConfigValidationError is the validation error returned by
// DataVolumeConfig.Validate if the designated constraints aren't met.
type DataVolumeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfigValidationError) ErrorName() string { return "DataVolumeConfigValidationError" }

// Error satisfies the builtin error interface
func (e DataVolumeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfigValidationError{}

// Validate checks the field values on DataVolume with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataVolume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolume with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataVolumeMultiError, or
// nil if none found.
func (m *DataVolume) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetDataVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataVolumeValidationError{
					field:  "DataVolume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataVolumeValidationError{
					field:  "DataVolume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataVolumeValidationError{
				field:  "DataVolume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataVolumeValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataVolumeValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataVolumeValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataVolumeMultiError(errors)
	}

	return nil
}

// DataVolumeMultiError is an error wrapping multiple validation errors
// returned by DataVolume.ValidateAll() if the designated constraints aren't met.
type DataVolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeMultiError) AllErrors() []error { return m }

// DataVolumeValidationError is the validation error returned by
// DataVolume.Validate if the designated constraints aren't met.
type DataVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeValidationError) ErrorName() string { return "DataVolumeValidationError" }

// Error satisfies the builtin error interface
func (e DataVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeValidationError{}

// Validate checks the field values on CreateDataVolumeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDataVolumeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDataVolumeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDataVolumeRequestMultiError, or nil if none found.
func (m *CreateDataVolumeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDataVolumeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDataVolumeRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDataVolumeRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDataVolumeRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDataVolumeRequestMultiError(errors)
	}

	return nil
}

// CreateDataVolumeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDataVolumeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDataVolumeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDataVolumeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDataVolumeRequestMultiError) AllErrors() []error { return m }

// CreateDataVolumeRequestValidationError is the validation error returned by
// CreateDataVolumeRequest.Validate if the designated constraints aren't met.
type CreateDataVolumeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDataVolumeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDataVolumeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDataVolumeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDataVolumeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDataVolumeRequestValidationError) ErrorName() string {
	return "CreateDataVolumeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDataVolumeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDataVolumeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDataVolumeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDataVolumeRequestValidationError{}

// Validate checks the field values on DeleteDataVolumeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataVolumeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataVolumeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataVolumeRequestMultiError, or nil if none found.
func (m *DeleteDataVolumeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataVolumeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteDataVolumeRequestMultiError(errors)
	}

	return nil
}

// DeleteDataVolumeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDataVolumeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDataVolumeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataVolumeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataVolumeRequestMultiError) AllErrors() []error { return m }

// DeleteDataVolumeRequestValidationError is the validation error returned by
// DeleteDataVolumeRequest.Validate if the designated constraints aren't met.
type DeleteDataVolumeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataVolumeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataVolumeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataVolumeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataVolumeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataVolumeRequestValidationError) ErrorName() string {
	return "DeleteDataVolumeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataVolumeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataVolumeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataVolumeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataVolumeRequestValidationError{}

// Validate checks the field values on DeleteDataVolumeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataVolumeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataVolumeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataVolumeResponseMultiError, or nil if none found.
func (m *DeleteDataVolumeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataVolumeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDataVolumeResponseMultiError(errors)
	}

	return nil
}

// DeleteDataVolumeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDataVolumeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDataVolumeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataVolumeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataVolumeResponseMultiError) AllErrors() []error { return m }

// DeleteDataVolumeResponseValidationError is the validation error returned by
// DeleteDataVolumeResponse.Validate if the designated constraints aren't met.
type DeleteDataVolumeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataVolumeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataVolumeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataVolumeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataVolumeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataVolumeResponseValidationError) ErrorName() string {
	return "DeleteDataVolumeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataVolumeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataVolumeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataVolumeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataVolumeResponseValidationError{}

// Validate checks the field values on ListDataVolumesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDataVolumesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataVolumesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataVolumesRequestMultiError, or nil if none found.
func (m *ListDataVolumesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataVolumesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDataVolumesRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDataVolumesRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDataVolumesRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDataVolumesRequestMultiError(errors)
	}

	return nil
}

// ListDataVolumesRequestMultiError is an error wrapping multiple validation
// errors returned by ListDataVolumesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDataVolumesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataVolumesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataVolumesRequestMultiError) AllErrors() []error { return m }

// ListDataVolumesRequestValidationError is the validation error returned by
// ListDataVolumesRequest.Validate if the designated constraints aren't met.
type ListDataVolumesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataVolumesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataVolumesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataVolumesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataVolumesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataVolumesRequestValidationError) ErrorName() string {
	return "ListDataVolumesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDataVolumesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataVolumesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataVolumesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataVolumesRequestValidationError{}

// Validate checks the field values on ListDataVolumesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDataVolumesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataVolumesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataVolumesResponseMultiError, or nil if none found.
func (m *ListDataVolumesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataVolumesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDataVolumesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDataVolumesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDataVolumesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDataVolumesResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDataVolumesResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDataVolumesResponseValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDataVolumesResponseMultiError(errors)
	}

	return nil
}

// ListDataVolumesResponseMultiError is an error wrapping multiple validation
// errors returned by ListDataVolumesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDataVolumesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataVolumesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataVolumesResponseMultiError) AllErrors() []error { return m }

// ListDataVolumesResponseValidationError is the validation error returned by
// ListDataVolumesResponse.Validate if the designated constraints aren't met.
type ListDataVolumesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataVolumesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataVolumesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataVolumesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataVolumesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataVolumesResponseValidationError) ErrorName() string {
	return "ListDataVolumesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDataVolumesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataVolumesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataVolumesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataVolumesResponseValidationError{}

// Validate checks the field values on DataVolumeConfig_DataSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataVolumeConfig_DataSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_DataSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_DataSourceMultiError, or nil if none found.
func (m *DataVolumeConfig_DataSource) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_DataSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.DataSource.(type) {

	case *DataVolumeConfig_DataSource_Http_:

		if all {
			switch v := interface{}(m.GetHttp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_DataSourceValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataVolumeConfig_DataSource_Registry_:

		if all {
			switch v := interface{}(m.GetRegistry()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Registry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Registry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_DataSourceValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataVolumeConfig_DataSource_S3_:

		if all {
			switch v := interface{}(m.GetS3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "S3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "S3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_DataSourceValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataVolumeConfig_DataSource_Blank_:

		if all {
			switch v := interface{}(m.GetBlank()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Blank",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Blank",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlank()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_DataSourceValidationError{
					field:  "Blank",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataVolumeConfig_DataSource_Upload_:

		if all {
			switch v := interface{}(m.GetUpload()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Upload",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_DataSourceValidationError{
						field:  "Upload",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpload()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_DataSourceValidationError{
					field:  "Upload",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataVolumeConfig_DataSourceMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_DataSourceMultiError is an error wrapping multiple
// validation errors returned by DataVolumeConfig_DataSource.ValidateAll() if
// the designated constraints aren't met.
type DataVolumeConfig_DataSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_DataSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_DataSourceMultiError) AllErrors() []error { return m }

// DataVolumeConfig_DataSourceValidationError is the validation error returned
// by DataVolumeConfig_DataSource.Validate if the designated constraints
// aren't met.
type DataVolumeConfig_DataSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_DataSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_DataSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_DataSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_DataSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_DataSourceValidationError) ErrorName() string {
	return "DataVolumeConfig_DataSourceValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_DataSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_DataSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_DataSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_DataSourceValidationError{}

// Validate checks the field values on DataVolumeConfig_BoundPVC with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataVolumeConfig_BoundPVC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_BoundPVC with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_BoundPVCMultiError, or nil if none found.
func (m *DataVolumeConfig_BoundPVC) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_BoundPVC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StorageClassName

	// no validation rules for Capacity

	if len(errors) > 0 {
		return DataVolumeConfig_BoundPVCMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_BoundPVCMultiError is an error wrapping multiple validation
// errors returned by DataVolumeConfig_BoundPVC.ValidateAll() if the
// designated constraints aren't met.
type DataVolumeConfig_BoundPVCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_BoundPVCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_BoundPVCMultiError) AllErrors() []error { return m }

// DataVolumeConfig_BoundPVCValidationError is the validation error returned by
// DataVolumeConfig_BoundPVC.Validate if the designated constraints aren't met.
type DataVolumeConfig_BoundPVCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_BoundPVCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_BoundPVCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_BoundPVCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_BoundPVCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_BoundPVCValidationError) ErrorName() string {
	return "DataVolumeConfig_BoundPVCValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_BoundPVCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_BoundPVC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_BoundPVCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_BoundPVCValidationError{}

// Validate checks the field values on DataVolumeConfig_OSFamily with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataVolumeConfig_OSFamily) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_OSFamily with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_OSFamilyMultiError, or nil if none found.
func (m *DataVolumeConfig_OSFamily) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_OSFamily) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.OsFamily.(type) {

	case *DataVolumeConfig_OSFamily_Centos_:

		if all {
			switch v := interface{}(m.GetCentos()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Centos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Centos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCentos()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_OSFamilyValidationError{
					field:  "Centos",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataVolumeConfig_OSFamily_Ubuntu_:

		if all {
			switch v := interface{}(m.GetUbuntu()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Ubuntu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Ubuntu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUbuntu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_OSFamilyValidationError{
					field:  "Ubuntu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataVolumeConfig_OSFamily_Debian_:

		if all {
			switch v := interface{}(m.GetDebian()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Debian",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Debian",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDebian()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_OSFamilyValidationError{
					field:  "Debian",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataVolumeConfig_OSFamily_Windows_:

		if all {
			switch v := interface{}(m.GetWindows()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Windows",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataVolumeConfig_OSFamilyValidationError{
						field:  "Windows",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWindows()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataVolumeConfig_OSFamilyValidationError{
					field:  "Windows",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataVolumeConfig_OSFamilyMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_OSFamilyMultiError is an error wrapping multiple validation
// errors returned by DataVolumeConfig_OSFamily.ValidateAll() if the
// designated constraints aren't met.
type DataVolumeConfig_OSFamilyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_OSFamilyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_OSFamilyMultiError) AllErrors() []error { return m }

// DataVolumeConfig_OSFamilyValidationError is the validation error returned by
// DataVolumeConfig_OSFamily.Validate if the designated constraints aren't met.
type DataVolumeConfig_OSFamilyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_OSFamilyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_OSFamilyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_OSFamilyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_OSFamilyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_OSFamilyValidationError) ErrorName() string {
	return "DataVolumeConfig_OSFamilyValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_OSFamilyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_OSFamily.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_OSFamilyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_OSFamilyValidationError{}

// Validate checks the field values on DataVolumeConfig_DataSource_Blank with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DataVolumeConfig_DataSource_Blank) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_DataSource_Blank
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_DataSource_BlankMultiError, or nil if none found.
func (m *DataVolumeConfig_DataSource_Blank) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_DataSource_Blank) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DataVolumeConfig_DataSource_BlankMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_DataSource_BlankMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_DataSource_Blank.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_BlankMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_DataSource_BlankMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_DataSource_BlankMultiError) AllErrors() []error { return m }

// DataVolumeConfig_DataSource_BlankValidationError is the validation error
// returned by DataVolumeConfig_DataSource_Blank.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_BlankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_DataSource_BlankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_DataSource_BlankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_DataSource_BlankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_DataSource_BlankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_DataSource_BlankValidationError) ErrorName() string {
	return "DataVolumeConfig_DataSource_BlankValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_DataSource_BlankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_DataSource_Blank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_DataSource_BlankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_DataSource_BlankValidationError{}

// Validate checks the field values on DataVolumeConfig_DataSource_Upload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DataVolumeConfig_DataSource_Upload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_DataSource_Upload
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_DataSource_UploadMultiError, or nil if none found.
func (m *DataVolumeConfig_DataSource_Upload) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_DataSource_Upload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DataVolumeConfig_DataSource_UploadMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_DataSource_UploadMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_DataSource_Upload.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_UploadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_DataSource_UploadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_DataSource_UploadMultiError) AllErrors() []error { return m }

// DataVolumeConfig_DataSource_UploadValidationError is the validation error
// returned by DataVolumeConfig_DataSource_Upload.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_UploadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_DataSource_UploadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_DataSource_UploadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_DataSource_UploadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_DataSource_UploadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_DataSource_UploadValidationError) ErrorName() string {
	return "DataVolumeConfig_DataSource_UploadValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_DataSource_UploadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_DataSource_Upload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_DataSource_UploadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_DataSource_UploadValidationError{}

// Validate checks the field values on DataVolumeConfig_DataSource_Http with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DataVolumeConfig_DataSource_Http) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_DataSource_Http with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_DataSource_HttpMultiError, or nil if none found.
func (m *DataVolumeConfig_DataSource_Http) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_DataSource_Http) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Headers

	if len(errors) > 0 {
		return DataVolumeConfig_DataSource_HttpMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_DataSource_HttpMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_DataSource_Http.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_HttpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_DataSource_HttpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_DataSource_HttpMultiError) AllErrors() []error { return m }

// DataVolumeConfig_DataSource_HttpValidationError is the validation error
// returned by DataVolumeConfig_DataSource_Http.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_HttpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_DataSource_HttpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_DataSource_HttpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_DataSource_HttpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_DataSource_HttpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_DataSource_HttpValidationError) ErrorName() string {
	return "DataVolumeConfig_DataSource_HttpValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_DataSource_HttpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_DataSource_Http.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_DataSource_HttpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_DataSource_HttpValidationError{}

// Validate checks the field values on DataVolumeConfig_DataSource_Registry
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DataVolumeConfig_DataSource_Registry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_DataSource_Registry
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_DataSource_RegistryMultiError, or nil if none found.
func (m *DataVolumeConfig_DataSource_Registry) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_DataSource_Registry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return DataVolumeConfig_DataSource_RegistryMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_DataSource_RegistryMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_DataSource_Registry.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_RegistryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_DataSource_RegistryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_DataSource_RegistryMultiError) AllErrors() []error { return m }

// DataVolumeConfig_DataSource_RegistryValidationError is the validation error
// returned by DataVolumeConfig_DataSource_Registry.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_RegistryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_DataSource_RegistryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_DataSource_RegistryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_DataSource_RegistryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_DataSource_RegistryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_DataSource_RegistryValidationError) ErrorName() string {
	return "DataVolumeConfig_DataSource_RegistryValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_DataSource_RegistryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_DataSource_Registry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_DataSource_RegistryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_DataSource_RegistryValidationError{}

// Validate checks the field values on DataVolumeConfig_DataSource_S3 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataVolumeConfig_DataSource_S3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_DataSource_S3 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_DataSource_S3MultiError, or nil if none found.
func (m *DataVolumeConfig_DataSource_S3) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_DataSource_S3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return DataVolumeConfig_DataSource_S3MultiError(errors)
	}

	return nil
}

// DataVolumeConfig_DataSource_S3MultiError is an error wrapping multiple
// validation errors returned by DataVolumeConfig_DataSource_S3.ValidateAll()
// if the designated constraints aren't met.
type DataVolumeConfig_DataSource_S3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_DataSource_S3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_DataSource_S3MultiError) AllErrors() []error { return m }

// DataVolumeConfig_DataSource_S3ValidationError is the validation error
// returned by DataVolumeConfig_DataSource_S3.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_DataSource_S3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_DataSource_S3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_DataSource_S3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_DataSource_S3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_DataSource_S3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_DataSource_S3ValidationError) ErrorName() string {
	return "DataVolumeConfig_DataSource_S3ValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_DataSource_S3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_DataSource_S3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_DataSource_S3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_DataSource_S3ValidationError{}

// Validate checks the field values on DataVolumeConfig_OSFamily_Centos with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DataVolumeConfig_OSFamily_Centos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_OSFamily_Centos with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_OSFamily_CentosMultiError, or nil if none found.
func (m *DataVolumeConfig_OSFamily_Centos) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_OSFamily_Centos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return DataVolumeConfig_OSFamily_CentosMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_OSFamily_CentosMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_OSFamily_Centos.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_CentosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_OSFamily_CentosMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_OSFamily_CentosMultiError) AllErrors() []error { return m }

// DataVolumeConfig_OSFamily_CentosValidationError is the validation error
// returned by DataVolumeConfig_OSFamily_Centos.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_CentosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_OSFamily_CentosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_OSFamily_CentosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_OSFamily_CentosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_OSFamily_CentosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_OSFamily_CentosValidationError) ErrorName() string {
	return "DataVolumeConfig_OSFamily_CentosValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_OSFamily_CentosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_OSFamily_Centos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_OSFamily_CentosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_OSFamily_CentosValidationError{}

// Validate checks the field values on DataVolumeConfig_OSFamily_Ubuntu with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DataVolumeConfig_OSFamily_Ubuntu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_OSFamily_Ubuntu with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_OSFamily_UbuntuMultiError, or nil if none found.
func (m *DataVolumeConfig_OSFamily_Ubuntu) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_OSFamily_Ubuntu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return DataVolumeConfig_OSFamily_UbuntuMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_OSFamily_UbuntuMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_OSFamily_Ubuntu.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_UbuntuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_OSFamily_UbuntuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_OSFamily_UbuntuMultiError) AllErrors() []error { return m }

// DataVolumeConfig_OSFamily_UbuntuValidationError is the validation error
// returned by DataVolumeConfig_OSFamily_Ubuntu.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_UbuntuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_OSFamily_UbuntuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_OSFamily_UbuntuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_OSFamily_UbuntuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_OSFamily_UbuntuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_OSFamily_UbuntuValidationError) ErrorName() string {
	return "DataVolumeConfig_OSFamily_UbuntuValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_OSFamily_UbuntuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_OSFamily_Ubuntu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_OSFamily_UbuntuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_OSFamily_UbuntuValidationError{}

// Validate checks the field values on DataVolumeConfig_OSFamily_Debian with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DataVolumeConfig_OSFamily_Debian) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_OSFamily_Debian with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_OSFamily_DebianMultiError, or nil if none found.
func (m *DataVolumeConfig_OSFamily_Debian) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_OSFamily_Debian) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return DataVolumeConfig_OSFamily_DebianMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_OSFamily_DebianMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_OSFamily_Debian.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_DebianMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_OSFamily_DebianMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_OSFamily_DebianMultiError) AllErrors() []error { return m }

// DataVolumeConfig_OSFamily_DebianValidationError is the validation error
// returned by DataVolumeConfig_OSFamily_Debian.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_DebianValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_OSFamily_DebianValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_OSFamily_DebianValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_OSFamily_DebianValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_OSFamily_DebianValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_OSFamily_DebianValidationError) ErrorName() string {
	return "DataVolumeConfig_OSFamily_DebianValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_OSFamily_DebianValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_OSFamily_Debian.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_OSFamily_DebianValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_OSFamily_DebianValidationError{}

// Validate checks the field values on DataVolumeConfig_OSFamily_Windows with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DataVolumeConfig_OSFamily_Windows) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataVolumeConfig_OSFamily_Windows
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DataVolumeConfig_OSFamily_WindowsMultiError, or nil if none found.
func (m *DataVolumeConfig_OSFamily_Windows) ValidateAll() error {
	return m.validate(true)
}

func (m *DataVolumeConfig_OSFamily_Windows) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return DataVolumeConfig_OSFamily_WindowsMultiError(errors)
	}

	return nil
}

// DataVolumeConfig_OSFamily_WindowsMultiError is an error wrapping multiple
// validation errors returned by
// DataVolumeConfig_OSFamily_Windows.ValidateAll() if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_WindowsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataVolumeConfig_OSFamily_WindowsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataVolumeConfig_OSFamily_WindowsMultiError) AllErrors() []error { return m }

// DataVolumeConfig_OSFamily_WindowsValidationError is the validation error
// returned by DataVolumeConfig_OSFamily_Windows.Validate if the designated
// constraints aren't met.
type DataVolumeConfig_OSFamily_WindowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataVolumeConfig_OSFamily_WindowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataVolumeConfig_OSFamily_WindowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataVolumeConfig_OSFamily_WindowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataVolumeConfig_OSFamily_WindowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataVolumeConfig_OSFamily_WindowsValidationError) ErrorName() string {
	return "DataVolumeConfig_OSFamily_WindowsValidationError"
}

// Error satisfies the builtin error interface
func (e DataVolumeConfig_OSFamily_WindowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataVolumeConfig_OSFamily_Windows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataVolumeConfig_OSFamily_WindowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataVolumeConfig_OSFamily_WindowsValidationError{}
