// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: management/datavolume/v1alpha1/datavolume.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataVolumeManagementClient is the client API for DataVolumeManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataVolumeManagementClient interface {
	CreateDataVolume(ctx context.Context, in *CreateDataVolumeRequest, opts ...grpc.CallOption) (*DataVolume, error)
	DeleteDataVolume(ctx context.Context, in *DeleteDataVolumeRequest, opts ...grpc.CallOption) (*DeleteDataVolumeResponse, error)
	ListDataVolumes(ctx context.Context, in *ListDataVolumesRequest, opts ...grpc.CallOption) (*ListDataVolumesResponse, error)
}

type dataVolumeManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewDataVolumeManagementClient(cc grpc.ClientConnInterface) DataVolumeManagementClient {
	return &dataVolumeManagementClient{cc}
}

func (c *dataVolumeManagementClient) CreateDataVolume(ctx context.Context, in *CreateDataVolumeRequest, opts ...grpc.CallOption) (*DataVolume, error) {
	out := new(DataVolume)
	err := c.cc.Invoke(ctx, "/vink.management.datavolume.v1alpha1.DataVolumeManagement/CreateDataVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataVolumeManagementClient) DeleteDataVolume(ctx context.Context, in *DeleteDataVolumeRequest, opts ...grpc.CallOption) (*DeleteDataVolumeResponse, error) {
	out := new(DeleteDataVolumeResponse)
	err := c.cc.Invoke(ctx, "/vink.management.datavolume.v1alpha1.DataVolumeManagement/DeleteDataVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataVolumeManagementClient) ListDataVolumes(ctx context.Context, in *ListDataVolumesRequest, opts ...grpc.CallOption) (*ListDataVolumesResponse, error) {
	out := new(ListDataVolumesResponse)
	err := c.cc.Invoke(ctx, "/vink.management.datavolume.v1alpha1.DataVolumeManagement/ListDataVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataVolumeManagementServer is the server API for DataVolumeManagement service.
// All implementations must embed UnimplementedDataVolumeManagementServer
// for forward compatibility
type DataVolumeManagementServer interface {
	CreateDataVolume(context.Context, *CreateDataVolumeRequest) (*DataVolume, error)
	DeleteDataVolume(context.Context, *DeleteDataVolumeRequest) (*DeleteDataVolumeResponse, error)
	ListDataVolumes(context.Context, *ListDataVolumesRequest) (*ListDataVolumesResponse, error)
	mustEmbedUnimplementedDataVolumeManagementServer()
}

// UnimplementedDataVolumeManagementServer must be embedded to have forward compatible implementations.
type UnimplementedDataVolumeManagementServer struct {
}

func (UnimplementedDataVolumeManagementServer) CreateDataVolume(context.Context, *CreateDataVolumeRequest) (*DataVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataVolume not implemented")
}
func (UnimplementedDataVolumeManagementServer) DeleteDataVolume(context.Context, *DeleteDataVolumeRequest) (*DeleteDataVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataVolume not implemented")
}
func (UnimplementedDataVolumeManagementServer) ListDataVolumes(context.Context, *ListDataVolumesRequest) (*ListDataVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataVolumes not implemented")
}
func (UnimplementedDataVolumeManagementServer) mustEmbedUnimplementedDataVolumeManagementServer() {}

// UnsafeDataVolumeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataVolumeManagementServer will
// result in compilation errors.
type UnsafeDataVolumeManagementServer interface {
	mustEmbedUnimplementedDataVolumeManagementServer()
}

func RegisterDataVolumeManagementServer(s grpc.ServiceRegistrar, srv DataVolumeManagementServer) {
	s.RegisterService(&DataVolumeManagement_ServiceDesc, srv)
}

func _DataVolumeManagement_CreateDataVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataVolumeManagementServer).CreateDataVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.datavolume.v1alpha1.DataVolumeManagement/CreateDataVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataVolumeManagementServer).CreateDataVolume(ctx, req.(*CreateDataVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataVolumeManagement_DeleteDataVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataVolumeManagementServer).DeleteDataVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.datavolume.v1alpha1.DataVolumeManagement/DeleteDataVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataVolumeManagementServer).DeleteDataVolume(ctx, req.(*DeleteDataVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataVolumeManagement_ListDataVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataVolumeManagementServer).ListDataVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.datavolume.v1alpha1.DataVolumeManagement/ListDataVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataVolumeManagementServer).ListDataVolumes(ctx, req.(*ListDataVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataVolumeManagement_ServiceDesc is the grpc.ServiceDesc for DataVolumeManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataVolumeManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vink.management.datavolume.v1alpha1.DataVolumeManagement",
	HandlerType: (*DataVolumeManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataVolume",
			Handler:    _DataVolumeManagement_CreateDataVolume_Handler,
		},
		{
			MethodName: "DeleteDataVolume",
			Handler:    _DataVolumeManagement_DeleteDataVolume_Handler,
		},
		{
			MethodName: "ListDataVolumes",
			Handler:    _DataVolumeManagement_ListDataVolumes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/datavolume/v1alpha1/datavolume.proto",
}
