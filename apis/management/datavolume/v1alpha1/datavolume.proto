syntax = "proto3";

option go_package = "vink.io/api/management/datavolume/v1alpha1";

package vink.management.datavolume.v1alpha1;

import "common/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/descriptor.proto";

service DataVolumeManagement {
    rpc CreateDataVolume(CreateDataVolumeRequest) returns (DataVolume) {
        option (google.api.http) = {
            post: "/apis/vink.io/v1alpha1/namespaces/{namespace}/datavolumes/{name}"
            body: "*"
        };
    }
    rpc DeleteDataVolume(DeleteDataVolumeRequest) returns (DeleteDataVolumeResponse) {
        option (google.api.http) = {
            delete: "/apis/vink.io/v1alpha1/namespaces/{namespace}/datavolumes/{name}"
        };
    }
    rpc ListDataVolumes(ListDataVolumesRequest) returns (ListDataVolumesResponse) {
        option (google.api.http) = {
            get: "/apis/vink.io/v1alpha1/namespaces/{namespace}/datavolumes"
        };
    }
}

message DataVolumeConfig {
    enum Disk {
        DATA = 0;
        BOOT = 1;
    }
    message DataSource {
        message Blank {}
        message Upload {}
        message Http {
            string url = 1;
            map<string, string> headers = 2;
        }
        message Registry {
            string url = 1;
        }
        message S3 {
            string url = 1;
        }
        oneof data_source {
            Http http = 1;
            Registry registry = 2;
            S3 s3 = 3;
            Blank blank = 4;
            Upload upload = 5;
        }
    }
    message BoundPVC {
        string storage_class_name = 1;
        // enum AccessMode {
        //     ACCESS_MODE_UNSPECIFIED = 0;
        //     READ_ONLY_MANY          = 1;
        //     READ_WRITE_ONCE         = 2;
        //     READ_WRITE_MANY         = 3;
        // }
        // AccessMode accessMode       = 3;
        string capacity = 2;
    }
    message OSFamily {
        message Centos {
            string version = 1;
        }
        message Ubuntu {
            string version = 1;
        }
        message Debian {
            string version = 1;
        }
        message Windows {
            string version = 1;
        }
        oneof os_family {
            Centos centos = 1;
            Ubuntu ubuntu = 2;
            Debian debian = 3;
            Windows windows = 4;
        }
    }
    Disk disk = 1;
    OSFamily os_family = 2;
    DataSource data_source = 3;
    BoundPVC bound_pvc = 4;
}

message DataVolume {
    string namespace = 1;
    string name = 2;
    google.protobuf.Struct data_volume = 3;
    google.protobuf.Timestamp creation_timestamp = 4;
}

message CreateDataVolumeRequest {
    string namespace = 1;
    string name = 2;
    DataVolumeConfig config = 3;
}

message DeleteDataVolumeRequest {
    string namespace = 1;
    string name = 2;
}

message DeleteDataVolumeResponse {}

message ListDataVolumesRequest {
    string namespace = 1;
    common.ListOptions options = 2;
}

message ListDataVolumesResponse {
    repeated DataVolume items = 1;
    common.ListOptions options = 2;
}
