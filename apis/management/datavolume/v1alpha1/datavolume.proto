syntax = "proto3";

option go_package = "github.com/kubevm.io/vink/apis/management/datavolume/v1alpha1";

package vink.management.datavolume.v1alpha1;

import "common/common.proto";
import "common/operating_system.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/descriptor.proto";

service DataVolumeManagement {
    rpc CreateDataVolume(CreateDataVolumeRequest) returns (DataVolume) {
        option (google.api.http) = {
            post: "/apis/vink.io/v1alpha1/namespaces/{namespace}/datavolumes/{name}"
            body: "*"
        };
    }
    rpc DeleteDataVolume(DeleteDataVolumeRequest) returns (DeleteDataVolumeResponse) {
        option (google.api.http) = {
            delete: "/apis/vink.io/v1alpha1/namespaces/{namespace}/datavolumes/{name}"
        };
    }
    rpc ListDataVolumes(ListDataVolumesRequest) returns (ListDataVolumesResponse) {
        option (google.api.http) = {
            get: "/apis/vink.io/v1alpha1/namespaces/{namespace}/datavolumes"
        };
    }
}

enum DataVolumeType {
    IMAGE = 0;
    ROOT = 1;
    DATA = 2;
}

message CreateDataVolumeRequest {
    string namespace = 1;
    string name = 2;
    DataVolumeConfig config = 3;
}

message DeleteDataVolumeRequest {
    string namespace = 1;
    string name = 2;
}

message DataVolumeConfig {
    message DataSource {
        message Blank {}
        message Upload {}
        message Http {
            string url = 1;
            map<string, string> headers = 2;
        }
        message Registry {
            string url = 1;
        }
        message S3 {
            string url = 1;
        }
        oneof data_source {
            Http http = 1;
            Registry registry = 2;
            S3 s3 = 3;
            Blank blank = 4;
            Upload upload = 5;
        }
    }
    message BoundPVC {
        string storage_class_name = 1;
        string capacity = 2;
    }
    message OperatingSystem {
        common.OperatingSystemType type = 1;
        // oneof operating_system_type {
        //     common.OperatingSystemType windows = 1;
        //     common.OperatingSystemType linux = 2;
        //     common.OperatingSystemType ubuntu = 3;
        //     common.OperatingSystemType centos = 4;
        //     common.OperatingSystemType debian = 5;
        // }
        oneof version {
            common.OperatingSystemWindowsVersion windows = 6;
            common.OperatingSystemUbuntuVersion ubuntu = 7;
            common.OperatingSystemCentOSVersion centos = 8;
            common.OperatingSystemDebianVersion debian = 9;
        }
    }
    DataVolumeType data_volume_type = 1;
    OperatingSystem operating_system = 2;
    DataSource data_source = 3;
    BoundPVC bound_pvc = 4;
}

message DataVolume {
    string namespace = 1;
    string name = 2;
    google.protobuf.Struct data_volume = 3;
    google.protobuf.Timestamp creation_timestamp = 4;
}

message DeleteDataVolumeResponse {}

message ListDataVolumesRequest {
    string namespace = 1;
    common.ListOptions options = 2;
}

message ListDataVolumesResponse {
    repeated DataVolume items = 1;
    common.ListOptions options = 2;
}
