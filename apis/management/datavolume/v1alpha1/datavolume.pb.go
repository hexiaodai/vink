// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: management/datavolume/v1alpha1/datavolume.proto

package v1alpha1

import (
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_struct "google.golang.org/protobuf/types/known/structpb"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "vink.io/api/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataVolumeConfig_Disk int32

const (
	DataVolumeConfig_DATA DataVolumeConfig_Disk = 0
	DataVolumeConfig_BOOT DataVolumeConfig_Disk = 1
)

// Enum value maps for DataVolumeConfig_Disk.
var (
	DataVolumeConfig_Disk_name = map[int32]string{
		0: "DATA",
		1: "BOOT",
	}
	DataVolumeConfig_Disk_value = map[string]int32{
		"DATA": 0,
		"BOOT": 1,
	}
)

func (x DataVolumeConfig_Disk) Enum() *DataVolumeConfig_Disk {
	p := new(DataVolumeConfig_Disk)
	*p = x
	return p
}

func (x DataVolumeConfig_Disk) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataVolumeConfig_Disk) Descriptor() protoreflect.EnumDescriptor {
	return file_management_datavolume_v1alpha1_datavolume_proto_enumTypes[0].Descriptor()
}

func (DataVolumeConfig_Disk) Type() protoreflect.EnumType {
	return &file_management_datavolume_v1alpha1_datavolume_proto_enumTypes[0]
}

func (x DataVolumeConfig_Disk) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataVolumeConfig_Disk.Descriptor instead.
func (DataVolumeConfig_Disk) EnumDescriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 0}
}

type DataVolumeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk       DataVolumeConfig_Disk        `protobuf:"varint,1,opt,name=disk,proto3,enum=vink.management.datavolume.v1alpha1.DataVolumeConfig_Disk" json:"disk,omitempty"`
	OsFamily   *DataVolumeConfig_OSFamily   `protobuf:"bytes,2,opt,name=os_family,json=osFamily,proto3" json:"os_family,omitempty"`
	DataSource *DataVolumeConfig_DataSource `protobuf:"bytes,3,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	BoundPvc   *DataVolumeConfig_BoundPVC   `protobuf:"bytes,4,opt,name=bound_pvc,json=boundPvc,proto3" json:"bound_pvc,omitempty"`
}

func (x *DataVolumeConfig) Reset() {
	*x = DataVolumeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig) ProtoMessage() {}

func (x *DataVolumeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0}
}

func (x *DataVolumeConfig) GetDisk() DataVolumeConfig_Disk {
	if x != nil {
		return x.Disk
	}
	return DataVolumeConfig_DATA
}

func (x *DataVolumeConfig) GetOsFamily() *DataVolumeConfig_OSFamily {
	if x != nil {
		return x.OsFamily
	}
	return nil
}

func (x *DataVolumeConfig) GetDataSource() *DataVolumeConfig_DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *DataVolumeConfig) GetBoundPvc() *DataVolumeConfig_BoundPVC {
	if x != nil {
		return x.BoundPvc
	}
	return nil
}

type DataVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DataVolume        *_struct.Struct      `protobuf:"bytes,3,opt,name=data_volume,json=dataVolume,proto3" json:"data_volume,omitempty"`
	CreationTimestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *DataVolume) Reset() {
	*x = DataVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolume) ProtoMessage() {}

func (x *DataVolume) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolume.ProtoReflect.Descriptor instead.
func (*DataVolume) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{1}
}

func (x *DataVolume) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DataVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataVolume) GetDataVolume() *_struct.Struct {
	if x != nil {
		return x.DataVolume
	}
	return nil
}

func (x *DataVolume) GetCreationTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type CreateDataVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Config    *DataVolumeConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateDataVolumeRequest) Reset() {
	*x = CreateDataVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataVolumeRequest) ProtoMessage() {}

func (x *CreateDataVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateDataVolumeRequest) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDataVolumeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateDataVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDataVolumeRequest) GetConfig() *DataVolumeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DeleteDataVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDataVolumeRequest) Reset() {
	*x = DeleteDataVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataVolumeRequest) ProtoMessage() {}

func (x *DeleteDataVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataVolumeRequest) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDataVolumeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteDataVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteDataVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDataVolumeResponse) Reset() {
	*x = DeleteDataVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataVolumeResponse) ProtoMessage() {}

func (x *DeleteDataVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataVolumeResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataVolumeResponse) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{4}
}

type ListDataVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string              `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Options   *common.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListDataVolumesRequest) Reset() {
	*x = ListDataVolumesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataVolumesRequest) ProtoMessage() {}

func (x *ListDataVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataVolumesRequest.ProtoReflect.Descriptor instead.
func (*ListDataVolumesRequest) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{5}
}

func (x *ListDataVolumesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListDataVolumesRequest) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListDataVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*DataVolume       `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Options *common.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListDataVolumesResponse) Reset() {
	*x = ListDataVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataVolumesResponse) ProtoMessage() {}

func (x *ListDataVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataVolumesResponse.ProtoReflect.Descriptor instead.
func (*ListDataVolumesResponse) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{6}
}

func (x *ListDataVolumesResponse) GetItems() []*DataVolume {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListDataVolumesResponse) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type DataVolumeConfig_DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataSource:
	//
	//	*DataVolumeConfig_DataSource_Http_
	//	*DataVolumeConfig_DataSource_Registry_
	//	*DataVolumeConfig_DataSource_S3_
	//	*DataVolumeConfig_DataSource_Blank_
	//	*DataVolumeConfig_DataSource_Upload_
	DataSource isDataVolumeConfig_DataSource_DataSource `protobuf_oneof:"data_source"`
}

func (x *DataVolumeConfig_DataSource) Reset() {
	*x = DataVolumeConfig_DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_DataSource) ProtoMessage() {}

func (x *DataVolumeConfig_DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_DataSource.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_DataSource) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 0}
}

func (m *DataVolumeConfig_DataSource) GetDataSource() isDataVolumeConfig_DataSource_DataSource {
	if m != nil {
		return m.DataSource
	}
	return nil
}

func (x *DataVolumeConfig_DataSource) GetHttp() *DataVolumeConfig_DataSource_Http {
	if x, ok := x.GetDataSource().(*DataVolumeConfig_DataSource_Http_); ok {
		return x.Http
	}
	return nil
}

func (x *DataVolumeConfig_DataSource) GetRegistry() *DataVolumeConfig_DataSource_Registry {
	if x, ok := x.GetDataSource().(*DataVolumeConfig_DataSource_Registry_); ok {
		return x.Registry
	}
	return nil
}

func (x *DataVolumeConfig_DataSource) GetS3() *DataVolumeConfig_DataSource_S3 {
	if x, ok := x.GetDataSource().(*DataVolumeConfig_DataSource_S3_); ok {
		return x.S3
	}
	return nil
}

func (x *DataVolumeConfig_DataSource) GetBlank() *DataVolumeConfig_DataSource_Blank {
	if x, ok := x.GetDataSource().(*DataVolumeConfig_DataSource_Blank_); ok {
		return x.Blank
	}
	return nil
}

func (x *DataVolumeConfig_DataSource) GetUpload() *DataVolumeConfig_DataSource_Upload {
	if x, ok := x.GetDataSource().(*DataVolumeConfig_DataSource_Upload_); ok {
		return x.Upload
	}
	return nil
}

type isDataVolumeConfig_DataSource_DataSource interface {
	isDataVolumeConfig_DataSource_DataSource()
}

type DataVolumeConfig_DataSource_Http_ struct {
	Http *DataVolumeConfig_DataSource_Http `protobuf:"bytes,1,opt,name=http,proto3,oneof"`
}

type DataVolumeConfig_DataSource_Registry_ struct {
	Registry *DataVolumeConfig_DataSource_Registry `protobuf:"bytes,2,opt,name=registry,proto3,oneof"`
}

type DataVolumeConfig_DataSource_S3_ struct {
	S3 *DataVolumeConfig_DataSource_S3 `protobuf:"bytes,3,opt,name=s3,proto3,oneof"`
}

type DataVolumeConfig_DataSource_Blank_ struct {
	Blank *DataVolumeConfig_DataSource_Blank `protobuf:"bytes,4,opt,name=blank,proto3,oneof"`
}

type DataVolumeConfig_DataSource_Upload_ struct {
	Upload *DataVolumeConfig_DataSource_Upload `protobuf:"bytes,5,opt,name=upload,proto3,oneof"`
}

func (*DataVolumeConfig_DataSource_Http_) isDataVolumeConfig_DataSource_DataSource() {}

func (*DataVolumeConfig_DataSource_Registry_) isDataVolumeConfig_DataSource_DataSource() {}

func (*DataVolumeConfig_DataSource_S3_) isDataVolumeConfig_DataSource_DataSource() {}

func (*DataVolumeConfig_DataSource_Blank_) isDataVolumeConfig_DataSource_DataSource() {}

func (*DataVolumeConfig_DataSource_Upload_) isDataVolumeConfig_DataSource_DataSource() {}

type DataVolumeConfig_BoundPVC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageClassName string `protobuf:"bytes,1,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
	//	enum AccessMode {
	//	    ACCESS_MODE_UNSPECIFIED = 0;
	//	    READ_ONLY_MANY          = 1;
	//	    READ_WRITE_ONCE         = 2;
	//	    READ_WRITE_MANY         = 3;
	//	}
	//
	// AccessMode accessMode       = 3;
	Capacity string `protobuf:"bytes,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *DataVolumeConfig_BoundPVC) Reset() {
	*x = DataVolumeConfig_BoundPVC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_BoundPVC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_BoundPVC) ProtoMessage() {}

func (x *DataVolumeConfig_BoundPVC) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_BoundPVC.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_BoundPVC) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DataVolumeConfig_BoundPVC) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *DataVolumeConfig_BoundPVC) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

type DataVolumeConfig_OSFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OsFamily:
	//
	//	*DataVolumeConfig_OSFamily_Centos_
	//	*DataVolumeConfig_OSFamily_Ubuntu_
	//	*DataVolumeConfig_OSFamily_Debian_
	//	*DataVolumeConfig_OSFamily_Windows_
	OsFamily isDataVolumeConfig_OSFamily_OsFamily `protobuf_oneof:"os_family"`
}

func (x *DataVolumeConfig_OSFamily) Reset() {
	*x = DataVolumeConfig_OSFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_OSFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_OSFamily) ProtoMessage() {}

func (x *DataVolumeConfig_OSFamily) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_OSFamily.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_OSFamily) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 2}
}

func (m *DataVolumeConfig_OSFamily) GetOsFamily() isDataVolumeConfig_OSFamily_OsFamily {
	if m != nil {
		return m.OsFamily
	}
	return nil
}

func (x *DataVolumeConfig_OSFamily) GetCentos() *DataVolumeConfig_OSFamily_Centos {
	if x, ok := x.GetOsFamily().(*DataVolumeConfig_OSFamily_Centos_); ok {
		return x.Centos
	}
	return nil
}

func (x *DataVolumeConfig_OSFamily) GetUbuntu() *DataVolumeConfig_OSFamily_Ubuntu {
	if x, ok := x.GetOsFamily().(*DataVolumeConfig_OSFamily_Ubuntu_); ok {
		return x.Ubuntu
	}
	return nil
}

func (x *DataVolumeConfig_OSFamily) GetDebian() *DataVolumeConfig_OSFamily_Debian {
	if x, ok := x.GetOsFamily().(*DataVolumeConfig_OSFamily_Debian_); ok {
		return x.Debian
	}
	return nil
}

func (x *DataVolumeConfig_OSFamily) GetWindows() *DataVolumeConfig_OSFamily_Windows {
	if x, ok := x.GetOsFamily().(*DataVolumeConfig_OSFamily_Windows_); ok {
		return x.Windows
	}
	return nil
}

type isDataVolumeConfig_OSFamily_OsFamily interface {
	isDataVolumeConfig_OSFamily_OsFamily()
}

type DataVolumeConfig_OSFamily_Centos_ struct {
	Centos *DataVolumeConfig_OSFamily_Centos `protobuf:"bytes,1,opt,name=centos,proto3,oneof"`
}

type DataVolumeConfig_OSFamily_Ubuntu_ struct {
	Ubuntu *DataVolumeConfig_OSFamily_Ubuntu `protobuf:"bytes,2,opt,name=ubuntu,proto3,oneof"`
}

type DataVolumeConfig_OSFamily_Debian_ struct {
	Debian *DataVolumeConfig_OSFamily_Debian `protobuf:"bytes,3,opt,name=debian,proto3,oneof"`
}

type DataVolumeConfig_OSFamily_Windows_ struct {
	Windows *DataVolumeConfig_OSFamily_Windows `protobuf:"bytes,4,opt,name=windows,proto3,oneof"`
}

func (*DataVolumeConfig_OSFamily_Centos_) isDataVolumeConfig_OSFamily_OsFamily() {}

func (*DataVolumeConfig_OSFamily_Ubuntu_) isDataVolumeConfig_OSFamily_OsFamily() {}

func (*DataVolumeConfig_OSFamily_Debian_) isDataVolumeConfig_OSFamily_OsFamily() {}

func (*DataVolumeConfig_OSFamily_Windows_) isDataVolumeConfig_OSFamily_OsFamily() {}

type DataVolumeConfig_DataSource_Blank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataVolumeConfig_DataSource_Blank) Reset() {
	*x = DataVolumeConfig_DataSource_Blank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_DataSource_Blank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_DataSource_Blank) ProtoMessage() {}

func (x *DataVolumeConfig_DataSource_Blank) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_DataSource_Blank.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_DataSource_Blank) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 0, 0}
}

type DataVolumeConfig_DataSource_Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataVolumeConfig_DataSource_Upload) Reset() {
	*x = DataVolumeConfig_DataSource_Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_DataSource_Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_DataSource_Upload) ProtoMessage() {}

func (x *DataVolumeConfig_DataSource_Upload) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_DataSource_Upload.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_DataSource_Upload) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 0, 1}
}

type DataVolumeConfig_DataSource_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DataVolumeConfig_DataSource_Http) Reset() {
	*x = DataVolumeConfig_DataSource_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_DataSource_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_DataSource_Http) ProtoMessage() {}

func (x *DataVolumeConfig_DataSource_Http) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_DataSource_Http.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_DataSource_Http) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *DataVolumeConfig_DataSource_Http) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DataVolumeConfig_DataSource_Http) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type DataVolumeConfig_DataSource_Registry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DataVolumeConfig_DataSource_Registry) Reset() {
	*x = DataVolumeConfig_DataSource_Registry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_DataSource_Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_DataSource_Registry) ProtoMessage() {}

func (x *DataVolumeConfig_DataSource_Registry) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_DataSource_Registry.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_DataSource_Registry) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *DataVolumeConfig_DataSource_Registry) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DataVolumeConfig_DataSource_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DataVolumeConfig_DataSource_S3) Reset() {
	*x = DataVolumeConfig_DataSource_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_DataSource_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_DataSource_S3) ProtoMessage() {}

func (x *DataVolumeConfig_DataSource_S3) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_DataSource_S3.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_DataSource_S3) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *DataVolumeConfig_DataSource_S3) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DataVolumeConfig_OSFamily_Centos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataVolumeConfig_OSFamily_Centos) Reset() {
	*x = DataVolumeConfig_OSFamily_Centos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_OSFamily_Centos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_OSFamily_Centos) ProtoMessage() {}

func (x *DataVolumeConfig_OSFamily_Centos) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_OSFamily_Centos.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_OSFamily_Centos) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *DataVolumeConfig_OSFamily_Centos) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DataVolumeConfig_OSFamily_Ubuntu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataVolumeConfig_OSFamily_Ubuntu) Reset() {
	*x = DataVolumeConfig_OSFamily_Ubuntu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_OSFamily_Ubuntu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_OSFamily_Ubuntu) ProtoMessage() {}

func (x *DataVolumeConfig_OSFamily_Ubuntu) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_OSFamily_Ubuntu.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_OSFamily_Ubuntu) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *DataVolumeConfig_OSFamily_Ubuntu) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DataVolumeConfig_OSFamily_Debian struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataVolumeConfig_OSFamily_Debian) Reset() {
	*x = DataVolumeConfig_OSFamily_Debian{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_OSFamily_Debian) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_OSFamily_Debian) ProtoMessage() {}

func (x *DataVolumeConfig_OSFamily_Debian) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_OSFamily_Debian.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_OSFamily_Debian) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *DataVolumeConfig_OSFamily_Debian) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DataVolumeConfig_OSFamily_Windows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataVolumeConfig_OSFamily_Windows) Reset() {
	*x = DataVolumeConfig_OSFamily_Windows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeConfig_OSFamily_Windows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeConfig_OSFamily_Windows) ProtoMessage() {}

func (x *DataVolumeConfig_OSFamily_Windows) ProtoReflect() protoreflect.Message {
	mi := &file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeConfig_OSFamily_Windows.ProtoReflect.Descriptor instead.
func (*DataVolumeConfig_OSFamily_Windows) Descriptor() ([]byte, []int) {
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *DataVolumeConfig_OSFamily_Windows) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_management_datavolume_v1alpha1_datavolume_proto protoreflect.FileDescriptor

var file_management_datavolume_v1alpha1_datavolume_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x23, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x0e, 0x0a, 0x10, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4e, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12,
	0x5b, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x52, 0x08, 0x6f, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x61, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x5b, 0x0a, 0x09, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x76, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x56, 0x43, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x76, 0x63, 0x1a, 0x89, 0x06, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76, 0x69, 0x6e, 0x6b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x67, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x55, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x5e, 0x0a, 0x05, 0x62, 0x6c, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x05, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x61, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x07, 0x0a, 0x05, 0x42,
	0x6c, 0x61, 0x6e, 0x6b, 0x1a, 0x08, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xc2,
	0x01, 0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x6c, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x1c, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x1a, 0x16, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x54, 0x0a, 0x08, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x56, 0x43, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0xaf,
	0x04, 0x0a, 0x08, 0x4f, 0x53, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x06, 0x63,
	0x65, 0x6e, 0x74, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x53, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x43, 0x65, 0x6e, 0x74,
	0x6f, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x12, 0x5f, 0x0a, 0x06,
	0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76,
	0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x55, 0x62, 0x75,
	0x6e, 0x74, 0x75, 0x48, 0x00, 0x52, 0x06, 0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x12, 0x5f, 0x0a,
	0x06, 0x64, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x69, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x12, 0x62,
	0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x48, 0x00, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x1a, 0x22, 0x0a, 0x06, 0x43, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x0a, 0x06, 0x55, 0x62, 0x75, 0x6e, 0x74, 0x75,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x0a, 0x06, 0x44, 0x65,
	0x62, 0x69, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x23,
	0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x22, 0x1a, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x22, 0xc3, 0x01, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x4b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x95, 0x05, 0x0a, 0x14,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3c, 0x2e, 0x76, 0x69, 0x6e, 0x6b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45,
	0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xd9, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3c, 0x2e, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a,
	0x40, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0xcf, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_management_datavolume_v1alpha1_datavolume_proto_rawDescOnce sync.Once
	file_management_datavolume_v1alpha1_datavolume_proto_rawDescData = file_management_datavolume_v1alpha1_datavolume_proto_rawDesc
)

func file_management_datavolume_v1alpha1_datavolume_proto_rawDescGZIP() []byte {
	file_management_datavolume_v1alpha1_datavolume_proto_rawDescOnce.Do(func() {
		file_management_datavolume_v1alpha1_datavolume_proto_rawDescData = protoimpl.X.CompressGZIP(file_management_datavolume_v1alpha1_datavolume_proto_rawDescData)
	})
	return file_management_datavolume_v1alpha1_datavolume_proto_rawDescData
}

var file_management_datavolume_v1alpha1_datavolume_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_management_datavolume_v1alpha1_datavolume_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_management_datavolume_v1alpha1_datavolume_proto_goTypes = []interface{}{
	(DataVolumeConfig_Disk)(0),                   // 0: vink.management.datavolume.v1alpha1.DataVolumeConfig.Disk
	(*DataVolumeConfig)(nil),                     // 1: vink.management.datavolume.v1alpha1.DataVolumeConfig
	(*DataVolume)(nil),                           // 2: vink.management.datavolume.v1alpha1.DataVolume
	(*CreateDataVolumeRequest)(nil),              // 3: vink.management.datavolume.v1alpha1.CreateDataVolumeRequest
	(*DeleteDataVolumeRequest)(nil),              // 4: vink.management.datavolume.v1alpha1.DeleteDataVolumeRequest
	(*DeleteDataVolumeResponse)(nil),             // 5: vink.management.datavolume.v1alpha1.DeleteDataVolumeResponse
	(*ListDataVolumesRequest)(nil),               // 6: vink.management.datavolume.v1alpha1.ListDataVolumesRequest
	(*ListDataVolumesResponse)(nil),              // 7: vink.management.datavolume.v1alpha1.ListDataVolumesResponse
	(*DataVolumeConfig_DataSource)(nil),          // 8: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource
	(*DataVolumeConfig_BoundPVC)(nil),            // 9: vink.management.datavolume.v1alpha1.DataVolumeConfig.BoundPVC
	(*DataVolumeConfig_OSFamily)(nil),            // 10: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily
	(*DataVolumeConfig_DataSource_Blank)(nil),    // 11: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Blank
	(*DataVolumeConfig_DataSource_Upload)(nil),   // 12: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Upload
	(*DataVolumeConfig_DataSource_Http)(nil),     // 13: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Http
	(*DataVolumeConfig_DataSource_Registry)(nil), // 14: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Registry
	(*DataVolumeConfig_DataSource_S3)(nil),       // 15: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.S3
	nil,                                          // 16: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Http.HeadersEntry
	(*DataVolumeConfig_OSFamily_Centos)(nil),     // 17: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Centos
	(*DataVolumeConfig_OSFamily_Ubuntu)(nil),     // 18: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Ubuntu
	(*DataVolumeConfig_OSFamily_Debian)(nil),     // 19: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Debian
	(*DataVolumeConfig_OSFamily_Windows)(nil),    // 20: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Windows
	(*_struct.Struct)(nil),                       // 21: google.protobuf.Struct
	(*timestamp.Timestamp)(nil),                  // 22: google.protobuf.Timestamp
	(*common.ListOptions)(nil),                   // 23: vink.common.ListOptions
}
var file_management_datavolume_v1alpha1_datavolume_proto_depIdxs = []int32{
	0,  // 0: vink.management.datavolume.v1alpha1.DataVolumeConfig.disk:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.Disk
	10, // 1: vink.management.datavolume.v1alpha1.DataVolumeConfig.os_family:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily
	8,  // 2: vink.management.datavolume.v1alpha1.DataVolumeConfig.data_source:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource
	9,  // 3: vink.management.datavolume.v1alpha1.DataVolumeConfig.bound_pvc:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.BoundPVC
	21, // 4: vink.management.datavolume.v1alpha1.DataVolume.data_volume:type_name -> google.protobuf.Struct
	22, // 5: vink.management.datavolume.v1alpha1.DataVolume.creation_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 6: vink.management.datavolume.v1alpha1.CreateDataVolumeRequest.config:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig
	23, // 7: vink.management.datavolume.v1alpha1.ListDataVolumesRequest.options:type_name -> vink.common.ListOptions
	2,  // 8: vink.management.datavolume.v1alpha1.ListDataVolumesResponse.items:type_name -> vink.management.datavolume.v1alpha1.DataVolume
	23, // 9: vink.management.datavolume.v1alpha1.ListDataVolumesResponse.options:type_name -> vink.common.ListOptions
	13, // 10: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.http:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Http
	14, // 11: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.registry:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Registry
	15, // 12: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.s3:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.S3
	11, // 13: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.blank:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Blank
	12, // 14: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.upload:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Upload
	17, // 15: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.centos:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Centos
	18, // 16: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.ubuntu:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Ubuntu
	19, // 17: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.debian:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Debian
	20, // 18: vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.windows:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.OSFamily.Windows
	16, // 19: vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Http.headers:type_name -> vink.management.datavolume.v1alpha1.DataVolumeConfig.DataSource.Http.HeadersEntry
	3,  // 20: vink.management.datavolume.v1alpha1.DataVolumeManagement.CreateDataVolume:input_type -> vink.management.datavolume.v1alpha1.CreateDataVolumeRequest
	4,  // 21: vink.management.datavolume.v1alpha1.DataVolumeManagement.DeleteDataVolume:input_type -> vink.management.datavolume.v1alpha1.DeleteDataVolumeRequest
	6,  // 22: vink.management.datavolume.v1alpha1.DataVolumeManagement.ListDataVolumes:input_type -> vink.management.datavolume.v1alpha1.ListDataVolumesRequest
	2,  // 23: vink.management.datavolume.v1alpha1.DataVolumeManagement.CreateDataVolume:output_type -> vink.management.datavolume.v1alpha1.DataVolume
	5,  // 24: vink.management.datavolume.v1alpha1.DataVolumeManagement.DeleteDataVolume:output_type -> vink.management.datavolume.v1alpha1.DeleteDataVolumeResponse
	7,  // 25: vink.management.datavolume.v1alpha1.DataVolumeManagement.ListDataVolumes:output_type -> vink.management.datavolume.v1alpha1.ListDataVolumesResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_management_datavolume_v1alpha1_datavolume_proto_init() }
func file_management_datavolume_v1alpha1_datavolume_proto_init() {
	if File_management_datavolume_v1alpha1_datavolume_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataVolumesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_BoundPVC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_OSFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_DataSource_Blank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_DataSource_Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_DataSource_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_DataSource_Registry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_DataSource_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_OSFamily_Centos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_OSFamily_Ubuntu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_OSFamily_Debian); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeConfig_OSFamily_Windows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DataVolumeConfig_DataSource_Http_)(nil),
		(*DataVolumeConfig_DataSource_Registry_)(nil),
		(*DataVolumeConfig_DataSource_S3_)(nil),
		(*DataVolumeConfig_DataSource_Blank_)(nil),
		(*DataVolumeConfig_DataSource_Upload_)(nil),
	}
	file_management_datavolume_v1alpha1_datavolume_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*DataVolumeConfig_OSFamily_Centos_)(nil),
		(*DataVolumeConfig_OSFamily_Ubuntu_)(nil),
		(*DataVolumeConfig_OSFamily_Debian_)(nil),
		(*DataVolumeConfig_OSFamily_Windows_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_datavolume_v1alpha1_datavolume_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_datavolume_v1alpha1_datavolume_proto_goTypes,
		DependencyIndexes: file_management_datavolume_v1alpha1_datavolume_proto_depIdxs,
		EnumInfos:         file_management_datavolume_v1alpha1_datavolume_proto_enumTypes,
		MessageInfos:      file_management_datavolume_v1alpha1_datavolume_proto_msgTypes,
	}.Build()
	File_management_datavolume_v1alpha1_datavolume_proto = out.File
	file_management_datavolume_v1alpha1_datavolume_proto_rawDesc = nil
	file_management_datavolume_v1alpha1_datavolume_proto_goTypes = nil
	file_management_datavolume_v1alpha1_datavolume_proto_depIdxs = nil
}
