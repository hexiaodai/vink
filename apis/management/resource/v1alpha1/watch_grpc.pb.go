// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: management/resource/v1alpha1/watch.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceWatchManagementClient is the client API for ResourceWatchManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceWatchManagementClient interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (ResourceWatchManagement_WatchClient, error)
}

type resourceWatchManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceWatchManagementClient(cc grpc.ClientConnInterface) ResourceWatchManagementClient {
	return &resourceWatchManagementClient{cc}
}

func (c *resourceWatchManagementClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (ResourceWatchManagement_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceWatchManagement_ServiceDesc.Streams[0], "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceWatchManagement/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceWatchManagementWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceWatchManagement_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type resourceWatchManagementWatchClient struct {
	grpc.ClientStream
}

func (x *resourceWatchManagementWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceWatchManagementServer is the server API for ResourceWatchManagement service.
// All implementations must embed UnimplementedResourceWatchManagementServer
// for forward compatibility
type ResourceWatchManagementServer interface {
	Watch(*WatchRequest, ResourceWatchManagement_WatchServer) error
	mustEmbedUnimplementedResourceWatchManagementServer()
}

// UnimplementedResourceWatchManagementServer must be embedded to have forward compatible implementations.
type UnimplementedResourceWatchManagementServer struct {
}

func (UnimplementedResourceWatchManagementServer) Watch(*WatchRequest, ResourceWatchManagement_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedResourceWatchManagementServer) mustEmbedUnimplementedResourceWatchManagementServer() {
}

// UnsafeResourceWatchManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceWatchManagementServer will
// result in compilation errors.
type UnsafeResourceWatchManagementServer interface {
	mustEmbedUnimplementedResourceWatchManagementServer()
}

func RegisterResourceWatchManagementServer(s grpc.ServiceRegistrar, srv ResourceWatchManagementServer) {
	s.RegisterService(&ResourceWatchManagement_ServiceDesc, srv)
}

func _ResourceWatchManagement_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceWatchManagementServer).Watch(m, &resourceWatchManagementWatchServer{stream})
}

type ResourceWatchManagement_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type resourceWatchManagementWatchServer struct {
	grpc.ServerStream
}

func (x *resourceWatchManagementWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ResourceWatchManagement_ServiceDesc is the grpc.ServiceDesc for ResourceWatchManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceWatchManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vink.kubevm.io.apis.management.resource.v1alpha1.ResourceWatchManagement",
	HandlerType: (*ResourceWatchManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ResourceWatchManagement_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "management/resource/v1alpha1/watch.proto",
}
