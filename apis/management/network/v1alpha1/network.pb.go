// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: management/network/v1alpha1/network.proto

package v1alpha1

import (
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_struct "google.golang.org/protobuf/types/known/structpb"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "vink.io/api/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node             *NodeNetworkInterface_Node               `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	NetworkInterface []*NodeNetworkInterface_NetworkInterface `protobuf:"bytes,2,rep,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
}

func (x *NodeNetworkInterface) Reset() {
	*x = NodeNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeNetworkInterface) ProtoMessage() {}

func (x *NodeNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeNetworkInterface.ProtoReflect.Descriptor instead.
func (*NodeNetworkInterface) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{0}
}

func (x *NodeNetworkInterface) GetNode() *NodeNetworkInterface_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeNetworkInterface) GetNetworkInterface() []*NodeNetworkInterface_NetworkInterface {
	if x != nil {
		return x.NetworkInterface
	}
	return nil
}

type MultusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	Spec              *_struct.Struct      `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status            *_struct.Struct      `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MultusConfig) Reset() {
	*x = MultusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultusConfig) ProtoMessage() {}

func (x *MultusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultusConfig.ProtoReflect.Descriptor instead.
func (*MultusConfig) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{1}
}

func (x *MultusConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultusConfig) GetCreationTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *MultusConfig) GetSpec() *_struct.Struct {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *MultusConfig) GetStatus() *_struct.Struct {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListNodesNetworkInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *common.ListOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 1;
}

func (x *ListNodesNetworkInterfacesRequest) Reset() {
	*x = ListNodesNetworkInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesNetworkInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesNetworkInterfacesRequest) ProtoMessage() {}

func (x *ListNodesNetworkInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesNetworkInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesNetworkInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{2}
}

func (x *ListNodesNetworkInterfacesRequest) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListNodesNetworkInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*NodeNetworkInterface `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Options *common.ListOptions     `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 2;
}

func (x *ListNodesNetworkInterfacesResponse) Reset() {
	*x = ListNodesNetworkInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesNetworkInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesNetworkInterfacesResponse) ProtoMessage() {}

func (x *ListNodesNetworkInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesNetworkInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesNetworkInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{3}
}

func (x *ListNodesNetworkInterfacesResponse) GetItems() []*NodeNetworkInterface {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListNodesNetworkInterfacesResponse) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateMultusConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nic  string `protobuf:"bytes,2,opt,name=nic,proto3" json:"nic,omitempty"`
}

func (x *CreateMultusConfigRequest) Reset() {
	*x = CreateMultusConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultusConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultusConfigRequest) ProtoMessage() {}

func (x *CreateMultusConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultusConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateMultusConfigRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMultusConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMultusConfigRequest) GetNic() string {
	if x != nil {
		return x.Nic
	}
	return ""
}

type UpdateMultusConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nic  string `protobuf:"bytes,2,opt,name=nic,proto3" json:"nic,omitempty"`
}

func (x *UpdateMultusConfigRequest) Reset() {
	*x = UpdateMultusConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMultusConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMultusConfigRequest) ProtoMessage() {}

func (x *UpdateMultusConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMultusConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateMultusConfigRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateMultusConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMultusConfigRequest) GetNic() string {
	if x != nil {
		return x.Nic
	}
	return ""
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	Spec              *_struct.Struct      `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status            *_struct.Struct      `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{6}
}

func (x *Subnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subnet) GetCreationTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *Subnet) GetSpec() *_struct.Struct {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Subnet) GetStatus() *_struct.Struct {
	if x != nil {
		return x.Status
	}
	return nil
}

type IPPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	Spec              *_struct.Struct      `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status            *_struct.Struct      `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IPPool) Reset() {
	*x = IPPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPool) ProtoMessage() {}

func (x *IPPool) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPool.ProtoReflect.Descriptor instead.
func (*IPPool) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{7}
}

func (x *IPPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IPPool) GetCreationTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *IPPool) GetSpec() *_struct.Struct {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *IPPool) GetStatus() *_struct.Struct {
	if x != nil {
		return x.Status
	}
	return nil
}

type SubnetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway    string                `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Ips        []string              `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	ExcludeIps []string              `protobuf:"bytes,3,rep,name=exclude_ips,json=excludeIps,proto3" json:"exclude_ips,omitempty"`
	Subnet     string                `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Routes     []*SubnetConfig_Route `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *SubnetConfig) Reset() {
	*x = SubnetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfig) ProtoMessage() {}

func (x *SubnetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfig.ProtoReflect.Descriptor instead.
func (*SubnetConfig) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{8}
}

func (x *SubnetConfig) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *SubnetConfig) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *SubnetConfig) GetExcludeIps() []string {
	if x != nil {
		return x.ExcludeIps
	}
	return nil
}

func (x *SubnetConfig) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *SubnetConfig) GetRoutes() []*SubnetConfig_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type IPPoolConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway    string                `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Ips        []string              `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	ExcludeIps []string              `protobuf:"bytes,3,rep,name=exclude_ips,json=excludeIps,proto3" json:"exclude_ips,omitempty"`
	Subnet     string                `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Routes     []*IPPoolConfig_Route `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *IPPoolConfig) Reset() {
	*x = IPPoolConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolConfig) ProtoMessage() {}

func (x *IPPoolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolConfig.ProtoReflect.Descriptor instead.
func (*IPPoolConfig) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{9}
}

func (x *IPPoolConfig) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *IPPoolConfig) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *IPPoolConfig) GetExcludeIps() []string {
	if x != nil {
		return x.ExcludeIps
	}
	return nil
}

func (x *IPPoolConfig) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *IPPoolConfig) GetRoutes() []*IPPoolConfig_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type CreateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config *SubnetConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateSubnetRequest) Reset() {
	*x = CreateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnetRequest) ProtoMessage() {}

func (x *CreateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{10}
}

func (x *CreateSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSubnetRequest) GetConfig() *SubnetConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config *SubnetConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *UpdateSubnetRequest) Reset() {
	*x = UpdateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetRequest) ProtoMessage() {}

func (x *UpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSubnetRequest) GetConfig() *SubnetConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateIPPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config *IPPoolConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateIPPoolRequest) Reset() {
	*x = CreateIPPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIPPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIPPoolRequest) ProtoMessage() {}

func (x *CreateIPPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIPPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateIPPoolRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{12}
}

func (x *CreateIPPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateIPPoolRequest) GetConfig() *IPPoolConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateIPPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config *IPPoolConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *UpdateIPPoolRequest) Reset() {
	*x = UpdateIPPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIPPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIPPoolRequest) ProtoMessage() {}

func (x *UpdateIPPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIPPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateIPPoolRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateIPPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIPPoolRequest) GetConfig() *IPPoolConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DeleteMultusConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMultusConfigRequest) Reset() {
	*x = DeleteMultusConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMultusConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMultusConfigRequest) ProtoMessage() {}

func (x *DeleteMultusConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMultusConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteMultusConfigRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteMultusConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteMultusConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMultusConfigResponse) Reset() {
	*x = DeleteMultusConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMultusConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMultusConfigResponse) ProtoMessage() {}

func (x *DeleteMultusConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMultusConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteMultusConfigResponse) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{15}
}

type DeleteSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSubnetRequest) Reset() {
	*x = DeleteSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetRequest) ProtoMessage() {}

func (x *DeleteSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubnetRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubnetResponse) Reset() {
	*x = DeleteSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetResponse) ProtoMessage() {}

func (x *DeleteSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubnetResponse) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{17}
}

type DeleteIPPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteIPPoolRequest) Reset() {
	*x = DeleteIPPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIPPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIPPoolRequest) ProtoMessage() {}

func (x *DeleteIPPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIPPoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteIPPoolRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteIPPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteIPPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIPPoolResponse) Reset() {
	*x = DeleteIPPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIPPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIPPoolResponse) ProtoMessage() {}

func (x *DeleteIPPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIPPoolResponse.ProtoReflect.Descriptor instead.
func (*DeleteIPPoolResponse) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{19}
}

type ListMultusConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *common.ListOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 1;
}

func (x *ListMultusConfigsRequest) Reset() {
	*x = ListMultusConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMultusConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMultusConfigsRequest) ProtoMessage() {}

func (x *ListMultusConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMultusConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListMultusConfigsRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{20}
}

func (x *ListMultusConfigsRequest) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListMultusConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*MultusConfig     `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Options *common.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 2;
}

func (x *ListMultusConfigsResponse) Reset() {
	*x = ListMultusConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMultusConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMultusConfigsResponse) ProtoMessage() {}

func (x *ListMultusConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMultusConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListMultusConfigsResponse) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{21}
}

func (x *ListMultusConfigsResponse) GetItems() []*MultusConfig {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListMultusConfigsResponse) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListSubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *common.ListOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 1;
}

func (x *ListSubnetsRequest) Reset() {
	*x = ListSubnetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsRequest) ProtoMessage() {}

func (x *ListSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{22}
}

func (x *ListSubnetsRequest) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListSubnetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*Subnet           `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Options *common.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 2;
}

func (x *ListSubnetsResponse) Reset() {
	*x = ListSubnetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsResponse) ProtoMessage() {}

func (x *ListSubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsResponse.ProtoReflect.Descriptor instead.
func (*ListSubnetsResponse) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{23}
}

func (x *ListSubnetsResponse) GetItems() []*Subnet {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSubnetsResponse) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListIPPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *common.ListOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 1;
}

func (x *ListIPPoolsRequest) Reset() {
	*x = ListIPPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIPPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIPPoolsRequest) ProtoMessage() {}

func (x *ListIPPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIPPoolsRequest.ProtoReflect.Descriptor instead.
func (*ListIPPoolsRequest) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{24}
}

func (x *ListIPPoolsRequest) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListIPPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*IPPool           `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Options *common.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"` // common.Pagination pagination = 2;
}

func (x *ListIPPoolsResponse) Reset() {
	*x = ListIPPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIPPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIPPoolsResponse) ProtoMessage() {}

func (x *ListIPPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIPPoolsResponse.ProtoReflect.Descriptor instead.
func (*ListIPPoolsResponse) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{25}
}

func (x *ListIPPoolsResponse) GetItems() []*IPPool {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListIPPoolsResponse) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type NodeNetworkInterface_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NodeNetworkInterface_Node) Reset() {
	*x = NodeNetworkInterface_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeNetworkInterface_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeNetworkInterface_Node) ProtoMessage() {}

func (x *NodeNetworkInterface_Node) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeNetworkInterface_Node.ProtoReflect.Descriptor instead.
func (*NodeNetworkInterface_Node) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NodeNetworkInterface_Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NodeNetworkInterface_NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Subnet  string `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway string `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	State   string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *NodeNetworkInterface_NetworkInterface) Reset() {
	*x = NodeNetworkInterface_NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeNetworkInterface_NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeNetworkInterface_NetworkInterface) ProtoMessage() {}

func (x *NodeNetworkInterface_NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeNetworkInterface_NetworkInterface.ProtoReflect.Descriptor instead.
func (*NodeNetworkInterface_NetworkInterface) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NodeNetworkInterface_NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeNetworkInterface_NetworkInterface) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeNetworkInterface_NetworkInterface) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *NodeNetworkInterface_NetworkInterface) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NodeNetworkInterface_NetworkInterface) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type SubnetConfig_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst string `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	Gw  string `protobuf:"bytes,2,opt,name=gw,proto3" json:"gw,omitempty"`
}

func (x *SubnetConfig_Route) Reset() {
	*x = SubnetConfig_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfig_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfig_Route) ProtoMessage() {}

func (x *SubnetConfig_Route) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfig_Route.ProtoReflect.Descriptor instead.
func (*SubnetConfig_Route) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SubnetConfig_Route) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *SubnetConfig_Route) GetGw() string {
	if x != nil {
		return x.Gw
	}
	return ""
}

type IPPoolConfig_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst string `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	Gw  string `protobuf:"bytes,2,opt,name=gw,proto3" json:"gw,omitempty"`
}

func (x *IPPoolConfig_Route) Reset() {
	*x = IPPoolConfig_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_network_v1alpha1_network_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolConfig_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolConfig_Route) ProtoMessage() {}

func (x *IPPoolConfig_Route) ProtoReflect() protoreflect.Message {
	mi := &file_management_network_v1alpha1_network_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolConfig_Route.ProtoReflect.Descriptor instead.
func (*IPPoolConfig_Route) Descriptor() ([]byte, []int) {
	return file_management_network_v1alpha1_network_proto_rawDescGZIP(), []int{9, 0}
}

func (x *IPPoolConfig_Route) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *IPPoolConfig_Route) GetGw() string {
	if x != nil {
		return x.Gw
	}
	return ""
}

var File_management_network_v1alpha1_network_proto protoreflect.FileDescriptor

var file_management_network_v1alpha1_network_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf9, 0x02, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x1a, 0x1a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x7e, 0x0a,
	0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x69, 0x63,
	0x22, 0x41, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6e, 0x69, 0x63, 0x22, 0xc5, 0x01, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x06,
	0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x70,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x76, 0x69, 0x6e, 0x6b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x29, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x67, 0x77, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x70, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x29, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67,
	0x77, 0x22, 0x71, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76,
	0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x71, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x71, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x71, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2f, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4e, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x48, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x96, 0x13, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xe8, 0x01, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b,
	0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x2d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9, 0x01, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x35, 0x2e,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x2e, 0x76, 0x69, 0x6e, 0x6b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x3a, 0x01, 0x2a, 0x1a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a,
	0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0xcd, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x35, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x76, 0x69, 0x6e, 0x6b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x2e, 0x76, 0x69, 0x6e, 0x6b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x2a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0xc3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3a, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x2d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x34, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76,
	0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x42,
	0x29, 0x5a, 0x27, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_management_network_v1alpha1_network_proto_rawDescOnce sync.Once
	file_management_network_v1alpha1_network_proto_rawDescData = file_management_network_v1alpha1_network_proto_rawDesc
)

func file_management_network_v1alpha1_network_proto_rawDescGZIP() []byte {
	file_management_network_v1alpha1_network_proto_rawDescOnce.Do(func() {
		file_management_network_v1alpha1_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_management_network_v1alpha1_network_proto_rawDescData)
	})
	return file_management_network_v1alpha1_network_proto_rawDescData
}

var file_management_network_v1alpha1_network_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_management_network_v1alpha1_network_proto_goTypes = []interface{}{
	(*NodeNetworkInterface)(nil),                  // 0: vink.management.network.v1alpha1.NodeNetworkInterface
	(*MultusConfig)(nil),                          // 1: vink.management.network.v1alpha1.MultusConfig
	(*ListNodesNetworkInterfacesRequest)(nil),     // 2: vink.management.network.v1alpha1.ListNodesNetworkInterfacesRequest
	(*ListNodesNetworkInterfacesResponse)(nil),    // 3: vink.management.network.v1alpha1.ListNodesNetworkInterfacesResponse
	(*CreateMultusConfigRequest)(nil),             // 4: vink.management.network.v1alpha1.CreateMultusConfigRequest
	(*UpdateMultusConfigRequest)(nil),             // 5: vink.management.network.v1alpha1.UpdateMultusConfigRequest
	(*Subnet)(nil),                                // 6: vink.management.network.v1alpha1.Subnet
	(*IPPool)(nil),                                // 7: vink.management.network.v1alpha1.IPPool
	(*SubnetConfig)(nil),                          // 8: vink.management.network.v1alpha1.SubnetConfig
	(*IPPoolConfig)(nil),                          // 9: vink.management.network.v1alpha1.IPPoolConfig
	(*CreateSubnetRequest)(nil),                   // 10: vink.management.network.v1alpha1.CreateSubnetRequest
	(*UpdateSubnetRequest)(nil),                   // 11: vink.management.network.v1alpha1.UpdateSubnetRequest
	(*CreateIPPoolRequest)(nil),                   // 12: vink.management.network.v1alpha1.CreateIPPoolRequest
	(*UpdateIPPoolRequest)(nil),                   // 13: vink.management.network.v1alpha1.UpdateIPPoolRequest
	(*DeleteMultusConfigRequest)(nil),             // 14: vink.management.network.v1alpha1.DeleteMultusConfigRequest
	(*DeleteMultusConfigResponse)(nil),            // 15: vink.management.network.v1alpha1.DeleteMultusConfigResponse
	(*DeleteSubnetRequest)(nil),                   // 16: vink.management.network.v1alpha1.DeleteSubnetRequest
	(*DeleteSubnetResponse)(nil),                  // 17: vink.management.network.v1alpha1.DeleteSubnetResponse
	(*DeleteIPPoolRequest)(nil),                   // 18: vink.management.network.v1alpha1.DeleteIPPoolRequest
	(*DeleteIPPoolResponse)(nil),                  // 19: vink.management.network.v1alpha1.DeleteIPPoolResponse
	(*ListMultusConfigsRequest)(nil),              // 20: vink.management.network.v1alpha1.ListMultusConfigsRequest
	(*ListMultusConfigsResponse)(nil),             // 21: vink.management.network.v1alpha1.ListMultusConfigsResponse
	(*ListSubnetsRequest)(nil),                    // 22: vink.management.network.v1alpha1.ListSubnetsRequest
	(*ListSubnetsResponse)(nil),                   // 23: vink.management.network.v1alpha1.ListSubnetsResponse
	(*ListIPPoolsRequest)(nil),                    // 24: vink.management.network.v1alpha1.ListIPPoolsRequest
	(*ListIPPoolsResponse)(nil),                   // 25: vink.management.network.v1alpha1.ListIPPoolsResponse
	(*NodeNetworkInterface_Node)(nil),             // 26: vink.management.network.v1alpha1.NodeNetworkInterface.Node
	(*NodeNetworkInterface_NetworkInterface)(nil), // 27: vink.management.network.v1alpha1.NodeNetworkInterface.NetworkInterface
	(*SubnetConfig_Route)(nil),                    // 28: vink.management.network.v1alpha1.SubnetConfig.Route
	(*IPPoolConfig_Route)(nil),                    // 29: vink.management.network.v1alpha1.IPPoolConfig.Route
	(*timestamp.Timestamp)(nil),                   // 30: google.protobuf.Timestamp
	(*_struct.Struct)(nil),                        // 31: google.protobuf.Struct
	(*common.ListOptions)(nil),                    // 32: vink.common.ListOptions
}
var file_management_network_v1alpha1_network_proto_depIdxs = []int32{
	26, // 0: vink.management.network.v1alpha1.NodeNetworkInterface.node:type_name -> vink.management.network.v1alpha1.NodeNetworkInterface.Node
	27, // 1: vink.management.network.v1alpha1.NodeNetworkInterface.network_interface:type_name -> vink.management.network.v1alpha1.NodeNetworkInterface.NetworkInterface
	30, // 2: vink.management.network.v1alpha1.MultusConfig.creation_timestamp:type_name -> google.protobuf.Timestamp
	31, // 3: vink.management.network.v1alpha1.MultusConfig.spec:type_name -> google.protobuf.Struct
	31, // 4: vink.management.network.v1alpha1.MultusConfig.status:type_name -> google.protobuf.Struct
	32, // 5: vink.management.network.v1alpha1.ListNodesNetworkInterfacesRequest.options:type_name -> vink.common.ListOptions
	0,  // 6: vink.management.network.v1alpha1.ListNodesNetworkInterfacesResponse.items:type_name -> vink.management.network.v1alpha1.NodeNetworkInterface
	32, // 7: vink.management.network.v1alpha1.ListNodesNetworkInterfacesResponse.options:type_name -> vink.common.ListOptions
	30, // 8: vink.management.network.v1alpha1.Subnet.creation_timestamp:type_name -> google.protobuf.Timestamp
	31, // 9: vink.management.network.v1alpha1.Subnet.spec:type_name -> google.protobuf.Struct
	31, // 10: vink.management.network.v1alpha1.Subnet.status:type_name -> google.protobuf.Struct
	30, // 11: vink.management.network.v1alpha1.IPPool.creation_timestamp:type_name -> google.protobuf.Timestamp
	31, // 12: vink.management.network.v1alpha1.IPPool.spec:type_name -> google.protobuf.Struct
	31, // 13: vink.management.network.v1alpha1.IPPool.status:type_name -> google.protobuf.Struct
	28, // 14: vink.management.network.v1alpha1.SubnetConfig.routes:type_name -> vink.management.network.v1alpha1.SubnetConfig.Route
	29, // 15: vink.management.network.v1alpha1.IPPoolConfig.routes:type_name -> vink.management.network.v1alpha1.IPPoolConfig.Route
	8,  // 16: vink.management.network.v1alpha1.CreateSubnetRequest.config:type_name -> vink.management.network.v1alpha1.SubnetConfig
	8,  // 17: vink.management.network.v1alpha1.UpdateSubnetRequest.config:type_name -> vink.management.network.v1alpha1.SubnetConfig
	9,  // 18: vink.management.network.v1alpha1.CreateIPPoolRequest.config:type_name -> vink.management.network.v1alpha1.IPPoolConfig
	9,  // 19: vink.management.network.v1alpha1.UpdateIPPoolRequest.config:type_name -> vink.management.network.v1alpha1.IPPoolConfig
	32, // 20: vink.management.network.v1alpha1.ListMultusConfigsRequest.options:type_name -> vink.common.ListOptions
	1,  // 21: vink.management.network.v1alpha1.ListMultusConfigsResponse.items:type_name -> vink.management.network.v1alpha1.MultusConfig
	32, // 22: vink.management.network.v1alpha1.ListMultusConfigsResponse.options:type_name -> vink.common.ListOptions
	32, // 23: vink.management.network.v1alpha1.ListSubnetsRequest.options:type_name -> vink.common.ListOptions
	6,  // 24: vink.management.network.v1alpha1.ListSubnetsResponse.items:type_name -> vink.management.network.v1alpha1.Subnet
	32, // 25: vink.management.network.v1alpha1.ListSubnetsResponse.options:type_name -> vink.common.ListOptions
	32, // 26: vink.management.network.v1alpha1.ListIPPoolsRequest.options:type_name -> vink.common.ListOptions
	7,  // 27: vink.management.network.v1alpha1.ListIPPoolsResponse.items:type_name -> vink.management.network.v1alpha1.IPPool
	32, // 28: vink.management.network.v1alpha1.ListIPPoolsResponse.options:type_name -> vink.common.ListOptions
	2,  // 29: vink.management.network.v1alpha1.NetworkManagement.ListNodesNetworkInterfaces:input_type -> vink.management.network.v1alpha1.ListNodesNetworkInterfacesRequest
	4,  // 30: vink.management.network.v1alpha1.NetworkManagement.CreateMultusConfig:input_type -> vink.management.network.v1alpha1.CreateMultusConfigRequest
	10, // 31: vink.management.network.v1alpha1.NetworkManagement.CreateSubnet:input_type -> vink.management.network.v1alpha1.CreateSubnetRequest
	12, // 32: vink.management.network.v1alpha1.NetworkManagement.CreateIPPool:input_type -> vink.management.network.v1alpha1.CreateIPPoolRequest
	5,  // 33: vink.management.network.v1alpha1.NetworkManagement.UpdateMultusConfig:input_type -> vink.management.network.v1alpha1.UpdateMultusConfigRequest
	11, // 34: vink.management.network.v1alpha1.NetworkManagement.UpdateSubnet:input_type -> vink.management.network.v1alpha1.UpdateSubnetRequest
	13, // 35: vink.management.network.v1alpha1.NetworkManagement.UpdateIPPool:input_type -> vink.management.network.v1alpha1.UpdateIPPoolRequest
	14, // 36: vink.management.network.v1alpha1.NetworkManagement.DeleteMultusConfig:input_type -> vink.management.network.v1alpha1.DeleteMultusConfigRequest
	16, // 37: vink.management.network.v1alpha1.NetworkManagement.DeleteSubnet:input_type -> vink.management.network.v1alpha1.DeleteSubnetRequest
	18, // 38: vink.management.network.v1alpha1.NetworkManagement.DeleteIPPool:input_type -> vink.management.network.v1alpha1.DeleteIPPoolRequest
	20, // 39: vink.management.network.v1alpha1.NetworkManagement.ListMultusConfigs:input_type -> vink.management.network.v1alpha1.ListMultusConfigsRequest
	22, // 40: vink.management.network.v1alpha1.NetworkManagement.ListSubnets:input_type -> vink.management.network.v1alpha1.ListSubnetsRequest
	24, // 41: vink.management.network.v1alpha1.NetworkManagement.ListIPPools:input_type -> vink.management.network.v1alpha1.ListIPPoolsRequest
	3,  // 42: vink.management.network.v1alpha1.NetworkManagement.ListNodesNetworkInterfaces:output_type -> vink.management.network.v1alpha1.ListNodesNetworkInterfacesResponse
	1,  // 43: vink.management.network.v1alpha1.NetworkManagement.CreateMultusConfig:output_type -> vink.management.network.v1alpha1.MultusConfig
	6,  // 44: vink.management.network.v1alpha1.NetworkManagement.CreateSubnet:output_type -> vink.management.network.v1alpha1.Subnet
	7,  // 45: vink.management.network.v1alpha1.NetworkManagement.CreateIPPool:output_type -> vink.management.network.v1alpha1.IPPool
	1,  // 46: vink.management.network.v1alpha1.NetworkManagement.UpdateMultusConfig:output_type -> vink.management.network.v1alpha1.MultusConfig
	6,  // 47: vink.management.network.v1alpha1.NetworkManagement.UpdateSubnet:output_type -> vink.management.network.v1alpha1.Subnet
	7,  // 48: vink.management.network.v1alpha1.NetworkManagement.UpdateIPPool:output_type -> vink.management.network.v1alpha1.IPPool
	15, // 49: vink.management.network.v1alpha1.NetworkManagement.DeleteMultusConfig:output_type -> vink.management.network.v1alpha1.DeleteMultusConfigResponse
	17, // 50: vink.management.network.v1alpha1.NetworkManagement.DeleteSubnet:output_type -> vink.management.network.v1alpha1.DeleteSubnetResponse
	19, // 51: vink.management.network.v1alpha1.NetworkManagement.DeleteIPPool:output_type -> vink.management.network.v1alpha1.DeleteIPPoolResponse
	21, // 52: vink.management.network.v1alpha1.NetworkManagement.ListMultusConfigs:output_type -> vink.management.network.v1alpha1.ListMultusConfigsResponse
	23, // 53: vink.management.network.v1alpha1.NetworkManagement.ListSubnets:output_type -> vink.management.network.v1alpha1.ListSubnetsResponse
	25, // 54: vink.management.network.v1alpha1.NetworkManagement.ListIPPools:output_type -> vink.management.network.v1alpha1.ListIPPoolsResponse
	42, // [42:55] is the sub-list for method output_type
	29, // [29:42] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_management_network_v1alpha1_network_proto_init() }
func file_management_network_v1alpha1_network_proto_init() {
	if File_management_network_v1alpha1_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_management_network_v1alpha1_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesNetworkInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesNetworkInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultusConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMultusConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIPPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIPPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMultusConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMultusConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIPPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIPPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMultusConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMultusConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubnetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubnetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIPPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIPPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeNetworkInterface_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeNetworkInterface_NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfig_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_network_v1alpha1_network_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolConfig_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_network_v1alpha1_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_network_v1alpha1_network_proto_goTypes,
		DependencyIndexes: file_management_network_v1alpha1_network_proto_depIdxs,
		MessageInfos:      file_management_network_v1alpha1_network_proto_msgTypes,
	}.Build()
	File_management_network_v1alpha1_network_proto = out.File
	file_management_network_v1alpha1_network_proto_rawDesc = nil
	file_management_network_v1alpha1_network_proto_goTypes = nil
	file_management_network_v1alpha1_network_proto_depIdxs = nil
}
