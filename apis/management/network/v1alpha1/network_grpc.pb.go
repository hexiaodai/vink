// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: management/network/v1alpha1/network.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkManagementClient is the client API for NetworkManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkManagementClient interface {
	ListNodesNetworkInterfaces(ctx context.Context, in *ListNodesNetworkInterfacesRequest, opts ...grpc.CallOption) (*ListNodesNetworkInterfacesResponse, error)
	CreateMultusConfig(ctx context.Context, in *CreateMultusConfigRequest, opts ...grpc.CallOption) (*MultusConfig, error)
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	CreateIPPool(ctx context.Context, in *CreateIPPoolRequest, opts ...grpc.CallOption) (*IPPool, error)
	UpdateMultusConfig(ctx context.Context, in *UpdateMultusConfigRequest, opts ...grpc.CallOption) (*MultusConfig, error)
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	UpdateIPPool(ctx context.Context, in *UpdateIPPoolRequest, opts ...grpc.CallOption) (*IPPool, error)
	DeleteMultusConfig(ctx context.Context, in *DeleteMultusConfigRequest, opts ...grpc.CallOption) (*DeleteMultusConfigResponse, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error)
	DeleteIPPool(ctx context.Context, in *DeleteIPPoolRequest, opts ...grpc.CallOption) (*DeleteIPPoolResponse, error)
	ListMultusConfigs(ctx context.Context, in *ListMultusConfigsRequest, opts ...grpc.CallOption) (*ListMultusConfigsResponse, error)
	ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error)
	ListIPPools(ctx context.Context, in *ListIPPoolsRequest, opts ...grpc.CallOption) (*ListIPPoolsResponse, error)
}

type networkManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkManagementClient(cc grpc.ClientConnInterface) NetworkManagementClient {
	return &networkManagementClient{cc}
}

func (c *networkManagementClient) ListNodesNetworkInterfaces(ctx context.Context, in *ListNodesNetworkInterfacesRequest, opts ...grpc.CallOption) (*ListNodesNetworkInterfacesResponse, error) {
	out := new(ListNodesNetworkInterfacesResponse)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/ListNodesNetworkInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) CreateMultusConfig(ctx context.Context, in *CreateMultusConfigRequest, opts ...grpc.CallOption) (*MultusConfig, error) {
	out := new(MultusConfig)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/CreateMultusConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/CreateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) CreateIPPool(ctx context.Context, in *CreateIPPoolRequest, opts ...grpc.CallOption) (*IPPool, error) {
	out := new(IPPool)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/CreateIPPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) UpdateMultusConfig(ctx context.Context, in *UpdateMultusConfigRequest, opts ...grpc.CallOption) (*MultusConfig, error) {
	out := new(MultusConfig)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/UpdateMultusConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/UpdateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) UpdateIPPool(ctx context.Context, in *UpdateIPPoolRequest, opts ...grpc.CallOption) (*IPPool, error) {
	out := new(IPPool)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/UpdateIPPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) DeleteMultusConfig(ctx context.Context, in *DeleteMultusConfigRequest, opts ...grpc.CallOption) (*DeleteMultusConfigResponse, error) {
	out := new(DeleteMultusConfigResponse)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/DeleteMultusConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error) {
	out := new(DeleteSubnetResponse)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) DeleteIPPool(ctx context.Context, in *DeleteIPPoolRequest, opts ...grpc.CallOption) (*DeleteIPPoolResponse, error) {
	out := new(DeleteIPPoolResponse)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/DeleteIPPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) ListMultusConfigs(ctx context.Context, in *ListMultusConfigsRequest, opts ...grpc.CallOption) (*ListMultusConfigsResponse, error) {
	out := new(ListMultusConfigsResponse)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/ListMultusConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error) {
	out := new(ListSubnetsResponse)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/ListSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagementClient) ListIPPools(ctx context.Context, in *ListIPPoolsRequest, opts ...grpc.CallOption) (*ListIPPoolsResponse, error) {
	out := new(ListIPPoolsResponse)
	err := c.cc.Invoke(ctx, "/vink.management.network.v1alpha1.NetworkManagement/ListIPPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkManagementServer is the server API for NetworkManagement service.
// All implementations must embed UnimplementedNetworkManagementServer
// for forward compatibility
type NetworkManagementServer interface {
	ListNodesNetworkInterfaces(context.Context, *ListNodesNetworkInterfacesRequest) (*ListNodesNetworkInterfacesResponse, error)
	CreateMultusConfig(context.Context, *CreateMultusConfigRequest) (*MultusConfig, error)
	CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error)
	CreateIPPool(context.Context, *CreateIPPoolRequest) (*IPPool, error)
	UpdateMultusConfig(context.Context, *UpdateMultusConfigRequest) (*MultusConfig, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error)
	UpdateIPPool(context.Context, *UpdateIPPoolRequest) (*IPPool, error)
	DeleteMultusConfig(context.Context, *DeleteMultusConfigRequest) (*DeleteMultusConfigResponse, error)
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error)
	DeleteIPPool(context.Context, *DeleteIPPoolRequest) (*DeleteIPPoolResponse, error)
	ListMultusConfigs(context.Context, *ListMultusConfigsRequest) (*ListMultusConfigsResponse, error)
	ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error)
	ListIPPools(context.Context, *ListIPPoolsRequest) (*ListIPPoolsResponse, error)
	mustEmbedUnimplementedNetworkManagementServer()
}

// UnimplementedNetworkManagementServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkManagementServer struct {
}

func (UnimplementedNetworkManagementServer) ListNodesNetworkInterfaces(context.Context, *ListNodesNetworkInterfacesRequest) (*ListNodesNetworkInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesNetworkInterfaces not implemented")
}
func (UnimplementedNetworkManagementServer) CreateMultusConfig(context.Context, *CreateMultusConfigRequest) (*MultusConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultusConfig not implemented")
}
func (UnimplementedNetworkManagementServer) CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedNetworkManagementServer) CreateIPPool(context.Context, *CreateIPPoolRequest) (*IPPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPPool not implemented")
}
func (UnimplementedNetworkManagementServer) UpdateMultusConfig(context.Context, *UpdateMultusConfigRequest) (*MultusConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMultusConfig not implemented")
}
func (UnimplementedNetworkManagementServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedNetworkManagementServer) UpdateIPPool(context.Context, *UpdateIPPoolRequest) (*IPPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPPool not implemented")
}
func (UnimplementedNetworkManagementServer) DeleteMultusConfig(context.Context, *DeleteMultusConfigRequest) (*DeleteMultusConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMultusConfig not implemented")
}
func (UnimplementedNetworkManagementServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedNetworkManagementServer) DeleteIPPool(context.Context, *DeleteIPPoolRequest) (*DeleteIPPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPPool not implemented")
}
func (UnimplementedNetworkManagementServer) ListMultusConfigs(context.Context, *ListMultusConfigsRequest) (*ListMultusConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultusConfigs not implemented")
}
func (UnimplementedNetworkManagementServer) ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedNetworkManagementServer) ListIPPools(context.Context, *ListIPPoolsRequest) (*ListIPPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIPPools not implemented")
}
func (UnimplementedNetworkManagementServer) mustEmbedUnimplementedNetworkManagementServer() {}

// UnsafeNetworkManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkManagementServer will
// result in compilation errors.
type UnsafeNetworkManagementServer interface {
	mustEmbedUnimplementedNetworkManagementServer()
}

func RegisterNetworkManagementServer(s grpc.ServiceRegistrar, srv NetworkManagementServer) {
	s.RegisterService(&NetworkManagement_ServiceDesc, srv)
}

func _NetworkManagement_ListNodesNetworkInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesNetworkInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).ListNodesNetworkInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/ListNodesNetworkInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).ListNodesNetworkInterfaces(ctx, req.(*ListNodesNetworkInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_CreateMultusConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultusConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).CreateMultusConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/CreateMultusConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).CreateMultusConfig(ctx, req.(*CreateMultusConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/CreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_CreateIPPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIPPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).CreateIPPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/CreateIPPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).CreateIPPool(ctx, req.(*CreateIPPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_UpdateMultusConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultusConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).UpdateMultusConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/UpdateMultusConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).UpdateMultusConfig(ctx, req.(*UpdateMultusConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/UpdateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_UpdateIPPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).UpdateIPPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/UpdateIPPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).UpdateIPPool(ctx, req.(*UpdateIPPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_DeleteMultusConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMultusConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).DeleteMultusConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/DeleteMultusConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).DeleteMultusConfig(ctx, req.(*DeleteMultusConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_DeleteIPPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).DeleteIPPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/DeleteIPPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).DeleteIPPool(ctx, req.(*DeleteIPPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_ListMultusConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultusConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).ListMultusConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/ListMultusConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).ListMultusConfigs(ctx, req.(*ListMultusConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/ListSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).ListSubnets(ctx, req.(*ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManagement_ListIPPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIPPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).ListIPPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.management.network.v1alpha1.NetworkManagement/ListIPPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).ListIPPools(ctx, req.(*ListIPPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkManagement_ServiceDesc is the grpc.ServiceDesc for NetworkManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vink.management.network.v1alpha1.NetworkManagement",
	HandlerType: (*NetworkManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNodesNetworkInterfaces",
			Handler:    _NetworkManagement_ListNodesNetworkInterfaces_Handler,
		},
		{
			MethodName: "CreateMultusConfig",
			Handler:    _NetworkManagement_CreateMultusConfig_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _NetworkManagement_CreateSubnet_Handler,
		},
		{
			MethodName: "CreateIPPool",
			Handler:    _NetworkManagement_CreateIPPool_Handler,
		},
		{
			MethodName: "UpdateMultusConfig",
			Handler:    _NetworkManagement_UpdateMultusConfig_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _NetworkManagement_UpdateSubnet_Handler,
		},
		{
			MethodName: "UpdateIPPool",
			Handler:    _NetworkManagement_UpdateIPPool_Handler,
		},
		{
			MethodName: "DeleteMultusConfig",
			Handler:    _NetworkManagement_DeleteMultusConfig_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _NetworkManagement_DeleteSubnet_Handler,
		},
		{
			MethodName: "DeleteIPPool",
			Handler:    _NetworkManagement_DeleteIPPool_Handler,
		},
		{
			MethodName: "ListMultusConfigs",
			Handler:    _NetworkManagement_ListMultusConfigs_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _NetworkManagement_ListSubnets_Handler,
		},
		{
			MethodName: "ListIPPools",
			Handler:    _NetworkManagement_ListIPPools_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/network/v1alpha1/network.proto",
}
