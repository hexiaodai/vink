// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: management/virtualmachine/v1alpha1/virtualmachine.proto

package v1alpha1

import (
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "github.com/kubevm.io/vink/apis/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ManageVirtualMachinePowerStateRequest_PowerState int32

const (
	ManageVirtualMachinePowerStateRequest_UNSPECIFIED ManageVirtualMachinePowerStateRequest_PowerState = 0
	ManageVirtualMachinePowerStateRequest_ON          ManageVirtualMachinePowerStateRequest_PowerState = 1
	ManageVirtualMachinePowerStateRequest_OFF         ManageVirtualMachinePowerStateRequest_PowerState = 2
)

// Enum value maps for ManageVirtualMachinePowerStateRequest_PowerState.
var (
	ManageVirtualMachinePowerStateRequest_PowerState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ON",
		2: "OFF",
	}
	ManageVirtualMachinePowerStateRequest_PowerState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ON":          1,
		"OFF":         2,
	}
)

func (x ManageVirtualMachinePowerStateRequest_PowerState) Enum() *ManageVirtualMachinePowerStateRequest_PowerState {
	p := new(ManageVirtualMachinePowerStateRequest_PowerState)
	*p = x
	return p
}

func (x ManageVirtualMachinePowerStateRequest_PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManageVirtualMachinePowerStateRequest_PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_enumTypes[0].Descriptor()
}

func (ManageVirtualMachinePowerStateRequest_PowerState) Type() protoreflect.EnumType {
	return &file_management_virtualmachine_v1alpha1_virtualmachine_proto_enumTypes[0]
}

func (x ManageVirtualMachinePowerStateRequest_PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManageVirtualMachinePowerStateRequest_PowerState.Descriptor instead.
func (ManageVirtualMachinePowerStateRequest_PowerState) EnumDescriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{8, 0}
}

type VirtualMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace              string          `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                   string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VirtualMachine         *_struct.Struct `protobuf:"bytes,3,opt,name=virtual_machine,json=virtualMachine,proto3" json:"virtual_machine,omitempty"`
	VirtualMachineInstance *_struct.Struct `protobuf:"bytes,4,opt,name=virtual_machine_instance,json=virtualMachineInstance,proto3" json:"virtual_machine_instance,omitempty"`
	// google.protobuf.Struct virtual_machine_network = 5;
	VirtualMachineDisk *VirtualMachine_Disk `protobuf:"bytes,6,opt,name=virtual_machine_disk,json=virtualMachineDisk,proto3" json:"virtual_machine_disk,omitempty"`
	CreationTimestamp  *timestamp.Timestamp `protobuf:"bytes,7,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *VirtualMachine) Reset() {
	*x = VirtualMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine) ProtoMessage() {}

func (x *VirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine.ProtoReflect.Descriptor instead.
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualMachine) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VirtualMachine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachine) GetVirtualMachine() *_struct.Struct {
	if x != nil {
		return x.VirtualMachine
	}
	return nil
}

func (x *VirtualMachine) GetVirtualMachineInstance() *_struct.Struct {
	if x != nil {
		return x.VirtualMachineInstance
	}
	return nil
}

func (x *VirtualMachine) GetVirtualMachineDisk() *VirtualMachine_Disk {
	if x != nil {
		return x.VirtualMachineDisk
	}
	return nil
}

func (x *VirtualMachine) GetCreationTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type VirtualMachineInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string          `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Spec      *_struct.Struct `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status    *_struct.Struct `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *VirtualMachineInstance) Reset() {
	*x = VirtualMachineInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineInstance) ProtoMessage() {}

func (x *VirtualMachineInstance) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineInstance.ProtoReflect.Descriptor instead.
func (*VirtualMachineInstance) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{1}
}

func (x *VirtualMachineInstance) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VirtualMachineInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachineInstance) GetSpec() *_struct.Struct {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VirtualMachineInstance) GetStatus() *_struct.Struct {
	if x != nil {
		return x.Status
	}
	return nil
}

type VirtualMachineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage    *VirtualMachineConfig_Storage    `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Network    *VirtualMachineConfig_Network    `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Resources  *VirtualMachineConfig_Resources  `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	UserConfig *VirtualMachineConfig_UserConfig `protobuf:"bytes,4,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
}

func (x *VirtualMachineConfig) Reset() {
	*x = VirtualMachineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig) ProtoMessage() {}

func (x *VirtualMachineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualMachineConfig) GetStorage() *VirtualMachineConfig_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *VirtualMachineConfig) GetNetwork() *VirtualMachineConfig_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *VirtualMachineConfig) GetResources() *VirtualMachineConfig_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *VirtualMachineConfig) GetUserConfig() *VirtualMachineConfig_UserConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

type CreateVirtualMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Config    *VirtualMachineConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateVirtualMachineRequest) Reset() {
	*x = CreateVirtualMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualMachineRequest) ProtoMessage() {}

func (x *CreateVirtualMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualMachineRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVirtualMachineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateVirtualMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVirtualMachineRequest) GetConfig() *VirtualMachineConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DeleteVirtualMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteVirtualMachineRequest) Reset() {
	*x = DeleteVirtualMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtualMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualMachineRequest) ProtoMessage() {}

func (x *DeleteVirtualMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualMachineRequest.ProtoReflect.Descriptor instead.
func (*DeleteVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteVirtualMachineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteVirtualMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteVirtualMachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVirtualMachineResponse) Reset() {
	*x = DeleteVirtualMachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtualMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualMachineResponse) ProtoMessage() {}

func (x *DeleteVirtualMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualMachineResponse.ProtoReflect.Descriptor instead.
func (*DeleteVirtualMachineResponse) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{5}
}

type ListVirtualMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string              `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Options   *common.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListVirtualMachinesRequest) Reset() {
	*x = ListVirtualMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtualMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualMachinesRequest) ProtoMessage() {}

func (x *ListVirtualMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualMachinesRequest.ProtoReflect.Descriptor instead.
func (*ListVirtualMachinesRequest) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{6}
}

func (x *ListVirtualMachinesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListVirtualMachinesRequest) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListVirtualMachinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*VirtualMachine   `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Options *common.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListVirtualMachinesResponse) Reset() {
	*x = ListVirtualMachinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtualMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualMachinesResponse) ProtoMessage() {}

func (x *ListVirtualMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualMachinesResponse.ProtoReflect.Descriptor instead.
func (*ListVirtualMachinesResponse) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{7}
}

func (x *ListVirtualMachinesResponse) GetItems() []*VirtualMachine {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListVirtualMachinesResponse) GetOptions() *common.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ManageVirtualMachinePowerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string                                           `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name       string                                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PowerState ManageVirtualMachinePowerStateRequest_PowerState `protobuf:"varint,3,opt,name=power_state,json=powerState,proto3,enum=vink.management.virtualmachine.v1alpha1.ManageVirtualMachinePowerStateRequest_PowerState" json:"power_state,omitempty"`
}

func (x *ManageVirtualMachinePowerStateRequest) Reset() {
	*x = ManageVirtualMachinePowerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageVirtualMachinePowerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageVirtualMachinePowerStateRequest) ProtoMessage() {}

func (x *ManageVirtualMachinePowerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageVirtualMachinePowerStateRequest.ProtoReflect.Descriptor instead.
func (*ManageVirtualMachinePowerStateRequest) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{8}
}

func (x *ManageVirtualMachinePowerStateRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ManageVirtualMachinePowerStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManageVirtualMachinePowerStateRequest) GetPowerState() ManageVirtualMachinePowerStateRequest_PowerState {
	if x != nil {
		return x.PowerState
	}
	return ManageVirtualMachinePowerStateRequest_UNSPECIFIED
}

type VirtualMachine_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root *_struct.Struct   `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Data []*_struct.Struct `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *VirtualMachine_Disk) Reset() {
	*x = VirtualMachine_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachine_Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine_Disk) ProtoMessage() {}

func (x *VirtualMachine_Disk) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine_Disk.ProtoReflect.Descriptor instead.
func (*VirtualMachine_Disk) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VirtualMachine_Disk) GetRoot() *_struct.Struct {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *VirtualMachine_Disk) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type VirtualMachineConfig_NamespaceNamed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VirtualMachineConfig_NamespaceNamed) Reset() {
	*x = VirtualMachineConfig_NamespaceNamed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_NamespaceNamed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_NamespaceNamed) ProtoMessage() {}

func (x *VirtualMachineConfig_NamespaceNamed) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_NamespaceNamed.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_NamespaceNamed) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2, 0}
}

func (x *VirtualMachineConfig_NamespaceNamed) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VirtualMachineConfig_NamespaceNamed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VirtualMachineConfig_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootDisk  *VirtualMachineConfig_Storage_BootDisk   `protobuf:"bytes,1,opt,name=boot_disk,json=bootDisk,proto3" json:"boot_disk,omitempty"`
	DataDisks []*VirtualMachineConfig_Storage_DataDisk `protobuf:"bytes,2,rep,name=data_disks,json=dataDisks,proto3" json:"data_disks,omitempty"`
}

func (x *VirtualMachineConfig_Storage) Reset() {
	*x = VirtualMachineConfig_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_Storage) ProtoMessage() {}

func (x *VirtualMachineConfig_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_Storage.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_Storage) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2, 1}
}

func (x *VirtualMachineConfig_Storage) GetBootDisk() *VirtualMachineConfig_Storage_BootDisk {
	if x != nil {
		return x.BootDisk
	}
	return nil
}

func (x *VirtualMachineConfig_Storage) GetDataDisks() []*VirtualMachineConfig_Storage_DataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

type VirtualMachineConfig_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultusConfigRef string `protobuf:"bytes,1,opt,name=multus_config_ref,json=multusConfigRef,proto3" json:"multus_config_ref,omitempty"`
	IppoolRef       string `protobuf:"bytes,2,opt,name=ippool_ref,json=ippoolRef,proto3" json:"ippool_ref,omitempty"`
}

func (x *VirtualMachineConfig_Network) Reset() {
	*x = VirtualMachineConfig_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_Network) ProtoMessage() {}

func (x *VirtualMachineConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_Network.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_Network) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2, 2}
}

func (x *VirtualMachineConfig_Network) GetMultusConfigRef() string {
	if x != nil {
		return x.MultusConfigRef
	}
	return ""
}

func (x *VirtualMachineConfig_Network) GetIppoolRef() string {
	if x != nil {
		return x.IppoolRef
	}
	return ""
}

type VirtualMachineConfig_Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuCores uint32 `protobuf:"varint,1,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	Memory   string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *VirtualMachineConfig_Resources) Reset() {
	*x = VirtualMachineConfig_Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_Resources) ProtoMessage() {}

func (x *VirtualMachineConfig_Resources) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_Resources.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_Resources) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2, 3}
}

func (x *VirtualMachineConfig_Resources) GetCpuCores() uint32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *VirtualMachineConfig_Resources) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

type VirtualMachineConfig_UserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudInitBase64 string   `protobuf:"bytes,1,opt,name=cloud_init_base64,json=cloudInitBase64,proto3" json:"cloud_init_base64,omitempty"`
	SshPublicKeys   []string `protobuf:"bytes,2,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
}

func (x *VirtualMachineConfig_UserConfig) Reset() {
	*x = VirtualMachineConfig_UserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_UserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_UserConfig) ProtoMessage() {}

func (x *VirtualMachineConfig_UserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_UserConfig.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_UserConfig) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2, 4}
}

func (x *VirtualMachineConfig_UserConfig) GetCloudInitBase64() string {
	if x != nil {
		return x.CloudInitBase64
	}
	return ""
}

func (x *VirtualMachineConfig_UserConfig) GetSshPublicKeys() []string {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

type VirtualMachineConfig_Storage_BootDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVolumeRef    *VirtualMachineConfig_NamespaceNamed `protobuf:"bytes,1,opt,name=data_volume_ref,json=dataVolumeRef,proto3" json:"data_volume_ref,omitempty"`
	Capacity         string                               `protobuf:"bytes,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	StorageClassName string                               `protobuf:"bytes,3,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
}

func (x *VirtualMachineConfig_Storage_BootDisk) Reset() {
	*x = VirtualMachineConfig_Storage_BootDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_Storage_BootDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_Storage_BootDisk) ProtoMessage() {}

func (x *VirtualMachineConfig_Storage_BootDisk) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_Storage_BootDisk.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_Storage_BootDisk) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *VirtualMachineConfig_Storage_BootDisk) GetDataVolumeRef() *VirtualMachineConfig_NamespaceNamed {
	if x != nil {
		return x.DataVolumeRef
	}
	return nil
}

func (x *VirtualMachineConfig_Storage_BootDisk) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *VirtualMachineConfig_Storage_BootDisk) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

type VirtualMachineConfig_Storage_DataDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVolumeRef string `protobuf:"bytes,1,opt,name=data_volume_ref,json=dataVolumeRef,proto3" json:"data_volume_ref,omitempty"`
}

func (x *VirtualMachineConfig_Storage_DataDisk) Reset() {
	*x = VirtualMachineConfig_Storage_DataDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_Storage_DataDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_Storage_DataDisk) ProtoMessage() {}

func (x *VirtualMachineConfig_Storage_DataDisk) ProtoReflect() protoreflect.Message {
	mi := &file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_Storage_DataDisk.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_Storage_DataDisk) Descriptor() ([]byte, []int) {
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *VirtualMachineConfig_Storage_DataDisk) GetDataVolumeRef() string {
	if x != nil {
		return x.DataVolumeRef
	}
	return ""
}

var File_management_virtualmachine_v1alpha1_virtualmachine_proto protoreflect.FileDescriptor

var file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x03, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x51, 0x0a,
	0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x16, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x6e, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x12, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x60, 0x0a, 0x04, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x01,
	0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd1, 0x09, 0x0a, 0x14, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x65, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x42, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe6, 0x03, 0x0a, 0x07, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x6d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x1a, 0xca, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x74,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x32,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x66, 0x1a, 0x54, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x1a, 0x40, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0x60, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x25, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x2e, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10,
	0x02, 0x32, 0xe4, 0x07, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xe6,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01,
	0x2a, 0x22, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xf1, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x44, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x46, 0x2a, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xe7, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69,
	0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x80, 0x02, 0x0a, 0x1e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x76, 0x69, 0x6e, 0x6b, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x3a, 0x01, 0x2a, 0x1a, 0x4a, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x30, 0x5a, 0x2e, 0x76, 0x69, 0x6e, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescOnce sync.Once
	file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescData = file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDesc
)

func file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescGZIP() []byte {
	file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescOnce.Do(func() {
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescData = protoimpl.X.CompressGZIP(file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescData)
	})
	return file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDescData
}

var file_management_virtualmachine_v1alpha1_virtualmachine_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_management_virtualmachine_v1alpha1_virtualmachine_proto_goTypes = []interface{}{
	(ManageVirtualMachinePowerStateRequest_PowerState)(0), // 0: vink.management.virtualmachine.v1alpha1.ManageVirtualMachinePowerStateRequest.PowerState
	(*VirtualMachine)(nil),                                // 1: vink.management.virtualmachine.v1alpha1.VirtualMachine
	(*VirtualMachineInstance)(nil),                        // 2: vink.management.virtualmachine.v1alpha1.VirtualMachineInstance
	(*VirtualMachineConfig)(nil),                          // 3: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig
	(*CreateVirtualMachineRequest)(nil),                   // 4: vink.management.virtualmachine.v1alpha1.CreateVirtualMachineRequest
	(*DeleteVirtualMachineRequest)(nil),                   // 5: vink.management.virtualmachine.v1alpha1.DeleteVirtualMachineRequest
	(*DeleteVirtualMachineResponse)(nil),                  // 6: vink.management.virtualmachine.v1alpha1.DeleteVirtualMachineResponse
	(*ListVirtualMachinesRequest)(nil),                    // 7: vink.management.virtualmachine.v1alpha1.ListVirtualMachinesRequest
	(*ListVirtualMachinesResponse)(nil),                   // 8: vink.management.virtualmachine.v1alpha1.ListVirtualMachinesResponse
	(*ManageVirtualMachinePowerStateRequest)(nil),         // 9: vink.management.virtualmachine.v1alpha1.ManageVirtualMachinePowerStateRequest
	(*VirtualMachine_Disk)(nil),                           // 10: vink.management.virtualmachine.v1alpha1.VirtualMachine.Disk
	(*VirtualMachineConfig_NamespaceNamed)(nil),           // 11: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.NamespaceNamed
	(*VirtualMachineConfig_Storage)(nil),                  // 12: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage
	(*VirtualMachineConfig_Network)(nil),                  // 13: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Network
	(*VirtualMachineConfig_Resources)(nil),                // 14: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Resources
	(*VirtualMachineConfig_UserConfig)(nil),               // 15: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.UserConfig
	(*VirtualMachineConfig_Storage_BootDisk)(nil),         // 16: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage.BootDisk
	(*VirtualMachineConfig_Storage_DataDisk)(nil),         // 17: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage.DataDisk
	(*_struct.Struct)(nil),                                // 18: google.protobuf.Struct
	(*timestamp.Timestamp)(nil),                           // 19: google.protobuf.Timestamp
	(*common.ListOptions)(nil),                            // 20: vink.common.ListOptions
}
var file_management_virtualmachine_v1alpha1_virtualmachine_proto_depIdxs = []int32{
	18, // 0: vink.management.virtualmachine.v1alpha1.VirtualMachine.virtual_machine:type_name -> google.protobuf.Struct
	18, // 1: vink.management.virtualmachine.v1alpha1.VirtualMachine.virtual_machine_instance:type_name -> google.protobuf.Struct
	10, // 2: vink.management.virtualmachine.v1alpha1.VirtualMachine.virtual_machine_disk:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachine.Disk
	19, // 3: vink.management.virtualmachine.v1alpha1.VirtualMachine.creation_timestamp:type_name -> google.protobuf.Timestamp
	18, // 4: vink.management.virtualmachine.v1alpha1.VirtualMachineInstance.spec:type_name -> google.protobuf.Struct
	18, // 5: vink.management.virtualmachine.v1alpha1.VirtualMachineInstance.status:type_name -> google.protobuf.Struct
	12, // 6: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.storage:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage
	13, // 7: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.network:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Network
	14, // 8: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.resources:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Resources
	15, // 9: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.user_config:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.UserConfig
	3,  // 10: vink.management.virtualmachine.v1alpha1.CreateVirtualMachineRequest.config:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig
	20, // 11: vink.management.virtualmachine.v1alpha1.ListVirtualMachinesRequest.options:type_name -> vink.common.ListOptions
	1,  // 12: vink.management.virtualmachine.v1alpha1.ListVirtualMachinesResponse.items:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachine
	20, // 13: vink.management.virtualmachine.v1alpha1.ListVirtualMachinesResponse.options:type_name -> vink.common.ListOptions
	0,  // 14: vink.management.virtualmachine.v1alpha1.ManageVirtualMachinePowerStateRequest.power_state:type_name -> vink.management.virtualmachine.v1alpha1.ManageVirtualMachinePowerStateRequest.PowerState
	18, // 15: vink.management.virtualmachine.v1alpha1.VirtualMachine.Disk.root:type_name -> google.protobuf.Struct
	18, // 16: vink.management.virtualmachine.v1alpha1.VirtualMachine.Disk.data:type_name -> google.protobuf.Struct
	16, // 17: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage.boot_disk:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage.BootDisk
	17, // 18: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage.data_disks:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage.DataDisk
	11, // 19: vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.Storage.BootDisk.data_volume_ref:type_name -> vink.management.virtualmachine.v1alpha1.VirtualMachineConfig.NamespaceNamed
	4,  // 20: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.CreateVirtualMachine:input_type -> vink.management.virtualmachine.v1alpha1.CreateVirtualMachineRequest
	5,  // 21: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.DeleteVirtualMachine:input_type -> vink.management.virtualmachine.v1alpha1.DeleteVirtualMachineRequest
	7,  // 22: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.ListVirtualMachines:input_type -> vink.management.virtualmachine.v1alpha1.ListVirtualMachinesRequest
	9,  // 23: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.ManageVirtualMachinePowerState:input_type -> vink.management.virtualmachine.v1alpha1.ManageVirtualMachinePowerStateRequest
	1,  // 24: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.CreateVirtualMachine:output_type -> vink.management.virtualmachine.v1alpha1.VirtualMachine
	6,  // 25: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.DeleteVirtualMachine:output_type -> vink.management.virtualmachine.v1alpha1.DeleteVirtualMachineResponse
	8,  // 26: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.ListVirtualMachines:output_type -> vink.management.virtualmachine.v1alpha1.ListVirtualMachinesResponse
	1,  // 27: vink.management.virtualmachine.v1alpha1.VirtualMachineManagement.ManageVirtualMachinePowerState:output_type -> vink.management.virtualmachine.v1alpha1.VirtualMachine
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_management_virtualmachine_v1alpha1_virtualmachine_proto_init() }
func file_management_virtualmachine_v1alpha1_virtualmachine_proto_init() {
	if File_management_virtualmachine_v1alpha1_virtualmachine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtualMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtualMachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtualMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtualMachinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageVirtualMachinePowerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachine_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_NamespaceNamed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_UserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_Storage_BootDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_Storage_DataDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_virtualmachine_v1alpha1_virtualmachine_proto_goTypes,
		DependencyIndexes: file_management_virtualmachine_v1alpha1_virtualmachine_proto_depIdxs,
		EnumInfos:         file_management_virtualmachine_v1alpha1_virtualmachine_proto_enumTypes,
		MessageInfos:      file_management_virtualmachine_v1alpha1_virtualmachine_proto_msgTypes,
	}.Build()
	File_management_virtualmachine_v1alpha1_virtualmachine_proto = out.File
	file_management_virtualmachine_v1alpha1_virtualmachine_proto_rawDesc = nil
	file_management_virtualmachine_v1alpha1_virtualmachine_proto_goTypes = nil
	file_management_virtualmachine_v1alpha1_virtualmachine_proto_depIdxs = nil
}
