// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/virtualmachine/v1alpha1/virtualmachine.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VirtualMachine with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VirtualMachine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachine with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VirtualMachineMultiError,
// or nil if none found.
func (m *VirtualMachine) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetVirtualMachine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "VirtualMachine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "VirtualMachine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVirtualMachine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineValidationError{
				field:  "VirtualMachine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVirtualMachineInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "VirtualMachineInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "VirtualMachineInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVirtualMachineInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineValidationError{
				field:  "VirtualMachineInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVirtualMachineDataVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "VirtualMachineDataVolume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "VirtualMachineDataVolume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVirtualMachineDataVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineValidationError{
				field:  "VirtualMachineDataVolume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VirtualMachineMultiError(errors)
	}

	return nil
}

// VirtualMachineMultiError is an error wrapping multiple validation errors
// returned by VirtualMachine.ValidateAll() if the designated constraints
// aren't met.
type VirtualMachineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineMultiError) AllErrors() []error { return m }

// VirtualMachineValidationError is the validation error returned by
// VirtualMachine.Validate if the designated constraints aren't met.
type VirtualMachineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineValidationError) ErrorName() string { return "VirtualMachineValidationError" }

// Error satisfies the builtin error interface
func (e VirtualMachineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineValidationError{}

// Validate checks the field values on VirtualMachineConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachineConfigMultiError, or nil if none found.
func (m *VirtualMachineConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStorage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineConfigValidationError{
				field:  "Storage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNetwork()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetwork()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineConfigValidationError{
				field:  "Network",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "Compute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "Compute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineConfigValidationError{
				field:  "Compute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "UserConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineConfigValidationError{
					field:  "UserConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineConfigValidationError{
				field:  "UserConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VirtualMachineConfigMultiError(errors)
	}

	return nil
}

// VirtualMachineConfigMultiError is an error wrapping multiple validation
// errors returned by VirtualMachineConfig.ValidateAll() if the designated
// constraints aren't met.
type VirtualMachineConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineConfigMultiError) AllErrors() []error { return m }

// VirtualMachineConfigValidationError is the validation error returned by
// VirtualMachineConfig.Validate if the designated constraints aren't met.
type VirtualMachineConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineConfigValidationError) ErrorName() string {
	return "VirtualMachineConfigValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineConfigValidationError{}

// Validate checks the field values on CreateVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVirtualMachineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVirtualMachineRequestMultiError, or nil if none found.
func (m *CreateVirtualMachineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVirtualMachineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVirtualMachineRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVirtualMachineRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualMachineRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVirtualMachineRequestMultiError(errors)
	}

	return nil
}

// CreateVirtualMachineRequestMultiError is an error wrapping multiple
// validation errors returned by CreateVirtualMachineRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateVirtualMachineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVirtualMachineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVirtualMachineRequestMultiError) AllErrors() []error { return m }

// CreateVirtualMachineRequestValidationError is the validation error returned
// by CreateVirtualMachineRequest.Validate if the designated constraints
// aren't met.
type CreateVirtualMachineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVirtualMachineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVirtualMachineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVirtualMachineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVirtualMachineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVirtualMachineRequestValidationError) ErrorName() string {
	return "CreateVirtualMachineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVirtualMachineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVirtualMachineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVirtualMachineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVirtualMachineRequestValidationError{}

// Validate checks the field values on DeleteVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteVirtualMachineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVirtualMachineRequestMultiError, or nil if none found.
func (m *DeleteVirtualMachineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVirtualMachineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteVirtualMachineRequestMultiError(errors)
	}

	return nil
}

// DeleteVirtualMachineRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteVirtualMachineRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteVirtualMachineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVirtualMachineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVirtualMachineRequestMultiError) AllErrors() []error { return m }

// DeleteVirtualMachineRequestValidationError is the validation error returned
// by DeleteVirtualMachineRequest.Validate if the designated constraints
// aren't met.
type DeleteVirtualMachineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVirtualMachineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVirtualMachineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVirtualMachineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVirtualMachineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVirtualMachineRequestValidationError) ErrorName() string {
	return "DeleteVirtualMachineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVirtualMachineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVirtualMachineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVirtualMachineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVirtualMachineRequestValidationError{}

// Validate checks the field values on DeleteVirtualMachineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteVirtualMachineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVirtualMachineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVirtualMachineResponseMultiError, or nil if none found.
func (m *DeleteVirtualMachineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVirtualMachineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteVirtualMachineResponseMultiError(errors)
	}

	return nil
}

// DeleteVirtualMachineResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteVirtualMachineResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteVirtualMachineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVirtualMachineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVirtualMachineResponseMultiError) AllErrors() []error { return m }

// DeleteVirtualMachineResponseValidationError is the validation error returned
// by DeleteVirtualMachineResponse.Validate if the designated constraints
// aren't met.
type DeleteVirtualMachineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVirtualMachineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVirtualMachineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVirtualMachineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVirtualMachineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVirtualMachineResponseValidationError) ErrorName() string {
	return "DeleteVirtualMachineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVirtualMachineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVirtualMachineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVirtualMachineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVirtualMachineResponseValidationError{}

// Validate checks the field values on ListVirtualMachinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVirtualMachinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVirtualMachinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVirtualMachinesRequestMultiError, or nil if none found.
func (m *ListVirtualMachinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVirtualMachinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVirtualMachinesRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVirtualMachinesRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVirtualMachinesRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListVirtualMachinesRequestMultiError(errors)
	}

	return nil
}

// ListVirtualMachinesRequestMultiError is an error wrapping multiple
// validation errors returned by ListVirtualMachinesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListVirtualMachinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVirtualMachinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVirtualMachinesRequestMultiError) AllErrors() []error { return m }

// ListVirtualMachinesRequestValidationError is the validation error returned
// by ListVirtualMachinesRequest.Validate if the designated constraints aren't met.
type ListVirtualMachinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVirtualMachinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVirtualMachinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVirtualMachinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVirtualMachinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVirtualMachinesRequestValidationError) ErrorName() string {
	return "ListVirtualMachinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVirtualMachinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVirtualMachinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVirtualMachinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVirtualMachinesRequestValidationError{}

// Validate checks the field values on ListVirtualMachinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVirtualMachinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVirtualMachinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVirtualMachinesResponseMultiError, or nil if none found.
func (m *ListVirtualMachinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVirtualMachinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVirtualMachinesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVirtualMachinesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVirtualMachinesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVirtualMachinesResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVirtualMachinesResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVirtualMachinesResponseValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListVirtualMachinesResponseMultiError(errors)
	}

	return nil
}

// ListVirtualMachinesResponseMultiError is an error wrapping multiple
// validation errors returned by ListVirtualMachinesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListVirtualMachinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVirtualMachinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVirtualMachinesResponseMultiError) AllErrors() []error { return m }

// ListVirtualMachinesResponseValidationError is the validation error returned
// by ListVirtualMachinesResponse.Validate if the designated constraints
// aren't met.
type ListVirtualMachinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVirtualMachinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVirtualMachinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVirtualMachinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVirtualMachinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVirtualMachinesResponseValidationError) ErrorName() string {
	return "ListVirtualMachinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVirtualMachinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVirtualMachinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVirtualMachinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVirtualMachinesResponseValidationError{}

// Validate checks the field values on ManageVirtualMachinePowerStateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ManageVirtualMachinePowerStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageVirtualMachinePowerStateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ManageVirtualMachinePowerStateRequestMultiError, or nil if none found.
func (m *ManageVirtualMachinePowerStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageVirtualMachinePowerStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for PowerState

	if len(errors) > 0 {
		return ManageVirtualMachinePowerStateRequestMultiError(errors)
	}

	return nil
}

// ManageVirtualMachinePowerStateRequestMultiError is an error wrapping
// multiple validation errors returned by
// ManageVirtualMachinePowerStateRequest.ValidateAll() if the designated
// constraints aren't met.
type ManageVirtualMachinePowerStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageVirtualMachinePowerStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageVirtualMachinePowerStateRequestMultiError) AllErrors() []error { return m }

// ManageVirtualMachinePowerStateRequestValidationError is the validation error
// returned by ManageVirtualMachinePowerStateRequest.Validate if the
// designated constraints aren't met.
type ManageVirtualMachinePowerStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageVirtualMachinePowerStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageVirtualMachinePowerStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageVirtualMachinePowerStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageVirtualMachinePowerStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageVirtualMachinePowerStateRequestValidationError) ErrorName() string {
	return "ManageVirtualMachinePowerStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManageVirtualMachinePowerStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageVirtualMachinePowerStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageVirtualMachinePowerStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageVirtualMachinePowerStateRequestValidationError{}

// Validate checks the field values on VirtualMachine_DataVolume with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachine_DataVolume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachine_DataVolume with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachine_DataVolumeMultiError, or nil if none found.
func (m *VirtualMachine_DataVolume) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachine_DataVolume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachine_DataVolumeValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachine_DataVolumeValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachine_DataVolumeValidationError{
				field:  "Root",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VirtualMachine_DataVolumeValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VirtualMachine_DataVolumeValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VirtualMachine_DataVolumeValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VirtualMachine_DataVolumeMultiError(errors)
	}

	return nil
}

// VirtualMachine_DataVolumeMultiError is an error wrapping multiple validation
// errors returned by VirtualMachine_DataVolume.ValidateAll() if the
// designated constraints aren't met.
type VirtualMachine_DataVolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachine_DataVolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachine_DataVolumeMultiError) AllErrors() []error { return m }

// VirtualMachine_DataVolumeValidationError is the validation error returned by
// VirtualMachine_DataVolume.Validate if the designated constraints aren't met.
type VirtualMachine_DataVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachine_DataVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachine_DataVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachine_DataVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachine_DataVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachine_DataVolumeValidationError) ErrorName() string {
	return "VirtualMachine_DataVolumeValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachine_DataVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachine_DataVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachine_DataVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachine_DataVolumeValidationError{}

// Validate checks the field values on VirtualMachineConfig_Storage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineConfig_Storage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineConfig_Storage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachineConfig_StorageMultiError, or nil if none found.
func (m *VirtualMachineConfig_Storage) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineConfig_Storage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineConfig_StorageValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineConfig_StorageValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineConfig_StorageValidationError{
				field:  "Root",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VirtualMachineConfig_StorageValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VirtualMachineConfig_StorageValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VirtualMachineConfig_StorageValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VirtualMachineConfig_StorageMultiError(errors)
	}

	return nil
}

// VirtualMachineConfig_StorageMultiError is an error wrapping multiple
// validation errors returned by VirtualMachineConfig_Storage.ValidateAll() if
// the designated constraints aren't met.
type VirtualMachineConfig_StorageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineConfig_StorageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineConfig_StorageMultiError) AllErrors() []error { return m }

// VirtualMachineConfig_StorageValidationError is the validation error returned
// by VirtualMachineConfig_Storage.Validate if the designated constraints
// aren't met.
type VirtualMachineConfig_StorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineConfig_StorageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineConfig_StorageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineConfig_StorageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineConfig_StorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineConfig_StorageValidationError) ErrorName() string {
	return "VirtualMachineConfig_StorageValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineConfig_StorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineConfig_Storage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineConfig_StorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineConfig_StorageValidationError{}

// Validate checks the field values on VirtualMachineConfig_Network with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineConfig_Network) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineConfig_Network with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachineConfig_NetworkMultiError, or nil if none found.
func (m *VirtualMachineConfig_Network) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineConfig_Network) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VirtualMachineConfig_NetworkMultiError(errors)
	}

	return nil
}

// VirtualMachineConfig_NetworkMultiError is an error wrapping multiple
// validation errors returned by VirtualMachineConfig_Network.ValidateAll() if
// the designated constraints aren't met.
type VirtualMachineConfig_NetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineConfig_NetworkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineConfig_NetworkMultiError) AllErrors() []error { return m }

// VirtualMachineConfig_NetworkValidationError is the validation error returned
// by VirtualMachineConfig_Network.Validate if the designated constraints
// aren't met.
type VirtualMachineConfig_NetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineConfig_NetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineConfig_NetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineConfig_NetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineConfig_NetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineConfig_NetworkValidationError) ErrorName() string {
	return "VirtualMachineConfig_NetworkValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineConfig_NetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineConfig_Network.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineConfig_NetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineConfig_NetworkValidationError{}

// Validate checks the field values on VirtualMachineConfig_Compute with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineConfig_Compute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineConfig_Compute with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualMachineConfig_ComputeMultiError, or nil if none found.
func (m *VirtualMachineConfig_Compute) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineConfig_Compute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuCores

	// no validation rules for Memory

	if len(errors) > 0 {
		return VirtualMachineConfig_ComputeMultiError(errors)
	}

	return nil
}

// VirtualMachineConfig_ComputeMultiError is an error wrapping multiple
// validation errors returned by VirtualMachineConfig_Compute.ValidateAll() if
// the designated constraints aren't met.
type VirtualMachineConfig_ComputeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineConfig_ComputeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineConfig_ComputeMultiError) AllErrors() []error { return m }

// VirtualMachineConfig_ComputeValidationError is the validation error returned
// by VirtualMachineConfig_Compute.Validate if the designated constraints
// aren't met.
type VirtualMachineConfig_ComputeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineConfig_ComputeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineConfig_ComputeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineConfig_ComputeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineConfig_ComputeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineConfig_ComputeValidationError) ErrorName() string {
	return "VirtualMachineConfig_ComputeValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineConfig_ComputeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineConfig_Compute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineConfig_ComputeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineConfig_ComputeValidationError{}

// Validate checks the field values on VirtualMachineConfig_UserConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualMachineConfig_UserConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachineConfig_UserConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VirtualMachineConfig_UserConfigMultiError, or nil if none found.
func (m *VirtualMachineConfig_UserConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineConfig_UserConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudInitBase64

	if len(errors) > 0 {
		return VirtualMachineConfig_UserConfigMultiError(errors)
	}

	return nil
}

// VirtualMachineConfig_UserConfigMultiError is an error wrapping multiple
// validation errors returned by VirtualMachineConfig_UserConfig.ValidateAll()
// if the designated constraints aren't met.
type VirtualMachineConfig_UserConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineConfig_UserConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineConfig_UserConfigMultiError) AllErrors() []error { return m }

// VirtualMachineConfig_UserConfigValidationError is the validation error
// returned by VirtualMachineConfig_UserConfig.Validate if the designated
// constraints aren't met.
type VirtualMachineConfig_UserConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineConfig_UserConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineConfig_UserConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineConfig_UserConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineConfig_UserConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineConfig_UserConfigValidationError) ErrorName() string {
	return "VirtualMachineConfig_UserConfigValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineConfig_UserConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineConfig_UserConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineConfig_UserConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineConfig_UserConfigValidationError{}

// Validate checks the field values on VirtualMachineConfig_Storage_DataVolume
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VirtualMachineConfig_Storage_DataVolume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// VirtualMachineConfig_Storage_DataVolume with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// VirtualMachineConfig_Storage_DataVolumeMultiError, or nil if none found.
func (m *VirtualMachineConfig_Storage_DataVolume) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachineConfig_Storage_DataVolume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualMachineConfig_Storage_DataVolumeValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualMachineConfig_Storage_DataVolumeValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineConfig_Storage_DataVolumeValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Capacity

	// no validation rules for StorageClassName

	if len(errors) > 0 {
		return VirtualMachineConfig_Storage_DataVolumeMultiError(errors)
	}

	return nil
}

// VirtualMachineConfig_Storage_DataVolumeMultiError is an error wrapping
// multiple validation errors returned by
// VirtualMachineConfig_Storage_DataVolume.ValidateAll() if the designated
// constraints aren't met.
type VirtualMachineConfig_Storage_DataVolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineConfig_Storage_DataVolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineConfig_Storage_DataVolumeMultiError) AllErrors() []error { return m }

// VirtualMachineConfig_Storage_DataVolumeValidationError is the validation
// error returned by VirtualMachineConfig_Storage_DataVolume.Validate if the
// designated constraints aren't met.
type VirtualMachineConfig_Storage_DataVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineConfig_Storage_DataVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineConfig_Storage_DataVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineConfig_Storage_DataVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineConfig_Storage_DataVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineConfig_Storage_DataVolumeValidationError) ErrorName() string {
	return "VirtualMachineConfig_Storage_DataVolumeValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineConfig_Storage_DataVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineConfig_Storage_DataVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineConfig_Storage_DataVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineConfig_Storage_DataVolumeValidationError{}
