syntax = "proto3";

package vink.kubevm.io.apis.management.template.v1alpha1;

import "google/protobuf/empty.proto";
import "types/types.proto";
import "validate/validate.proto";

option go_package = "github.com/kubevm.io/vink/apis/management/template/v1alpha1";

service TemplateManagement {
    rpc Get(GetRequest) returns (Template);
    rpc List(ListRequest) returns (ListResponse);
    rpc Create(CreateRequest) returns (Template);
    rpc Update(UpdateRequest) returns (Template);
    rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
    rpc Watch(WatchRequest) returns (stream WatchResponse);
}

message Template {
    TemplateSpec spec = 1;
}

message TemplateSpec {
	// +kubebuilder:validation:Required
	General *GeneralSpec `json:"general"`

	// +kubebuilder:validation:Required
	Compute *ComputeSpec `json:"compute"`

	// +kubebuilder:validation:Required
	Storage *StorageSpec `json:"storage"`

	// +kubebuilder:validation:Optional
	Network *NetworkSpec `json:"network"`

	// +kubebuilder:validation:Optional
	Initialization *InitializationSpec `json:"initialization,omitempty"`

	// +kubebuilder:validation:Optional
	Access *AccessSpec `json:"access,omitempty"`

	// +kubebuilder:validation:Optional
	Advanced *AdvancedSpec `json:"advanced,omitempty"`
}


type GeneralSpec struct {
	// +kubebuilder:validation:Optional
	Os *OperatingSystemSpec `json:"os,omitempty"`

	// +kubebuilder:validation:Required
	Source *ImageSource `json:"source"`

	// +kubebuilder:validation:Required
	User *UserSpec `json:"user"`
}

type OperatingSystemSpec struct {
	// +kubebuilder:validation:Required
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	Version string `json:"version"`
}

type ImageSource struct {
	// +kubebuilder:validation:Optional
	Builtin *ImageBuiltinSource `json:"builtin,omitempty"`

	// +kubebuilder:validation:Optional
	Http *ImageHTTPSource `json:"http,omitempty"`

	// +kubebuilder:validation:Optional
	S3 *ImageS3Source `json:"s3,omitempty"`

	// +kubebuilder:validation:Optional
	Registry *ImageRegistrySource `json:"registry,omitempty"`

	// +kubebuilder:validation:Optional
	Pvc *ImagePVCSource `json:"pvc,omitempty"`

	// +kubebuilder:validation:Optional
	DataVolume *ImageDataVolumeSource `json:"dataVolume,omitempty"`
}

type ImageBuiltinSource struct {
	// +kubebuilder:validation:Required
	Distribution string `json:"distribution"`

	// +kubebuilder:validation:Required
	Version string `json:"version"`
}

type ImageHTTPSource struct {
	// +kubebuilder:validation:Required
	Url string `json:"url,omitempty"`
}

type ImageS3Source struct {
	// +kubebuilder:validation:Required
	Url string `json:"url"`
}

type ImageRegistrySource struct {
	// +kubebuilder:validation:Required
	Url string `json:"url"`
}

type ImagePVCSource struct {
	// +kubebuilder:validation:Required
	Name string `json:"name"`
}

type ImageDataVolumeSource struct {
	// +kubebuilder:validation:Required
	Name string `json:"name"`
}

type UserSpec struct {
	// +kubebuilder:validation:Required
	Name string `json:"name"`

	// +kubebuilder:validation:Optional
	Password string `json:"password,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordBase64 string `json:"passwordBase64,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef string `json:"passwordSecretRef,omitempty"`

	// +kubebuilder:validation:Optional
	SshKey string `json:"sshKey,omitempty"`

	// +kubebuilder:validation:Optional
	SshKeyBase64 string `json:"sshKeyBase64,omitempty"`

	// +kubebuilder:validation:Optional
	SshKeySecretRef string `json:"sshKeySecretRef,omitempty"`
}

type ComputeSpec struct {
	// +kubebuilder:validation:Required
	Cpu *CpuSpec `json:"cpu"`

	// +kubebuilder:validation:Required
	Memory *MemorySpec `json:"memory"`
}

type CpuSpec struct {
	// +kubebuilder:validation:Required
	Cores int `json:"cores"`

	// +kubebuilder:validation:Optional
	// +kubebuilder:default:=1
	Threads int `json:"threads,omitempty"`
}

type MemorySpec struct {
	// +kubebuilder:validation:Required
	Size string `json:"size"`
}

type StorageSpec struct {
	// +kubebuilder:validation:Required
	RootDisk *DiskSpec `json:"rootDisk"`

	// +kubebuilder:validation:Optional
	DataDisks []DiskSpec `json:"dataDisks,omitempty"`
}

type DiskSpec struct {
	// +kubebuilder:validation:Required
	// Name string `json:"name"`

	// // +kubebuilder:validation:Required
	Size string `json:"size"`

	// +kubebuilder:validation:Optional
	StorageClass string `json:"storageClass"`

	// // +kubebuilder:validation:Optional
	// MountPath string `json:"mountPath,omitempty"`
}

type NetworkSpec struct {
	// +kubebuilder:validation:Optional
	Interfaces []NetworkInterface `json:"interfaces"`
}

type NetworkInterface struct {
	// +kubebuilder:validation:Required
	Type string `json:"type"`

	// // +kubebuilder:validation:Required
	// Name string `json:"name"`

	// // +kubebuilder:validation:Required
	// NetworkName string `json:"networkName"`

	// +kubebuilder:validation:Required
	Nad string `json:"nad"`

	// +kubebuilder:validation:Required
	Subnet string `json:"subnet"`

	// +kubebuilder:validation:Optional
	IpPool string `json:"ipPool,omitempty"`
}

// +kubebuilder:validation:Optional
type InitializationSpec struct {
	// +kubebuilder:validation:Optional
	CloudInit *CloudInitSpec `json:"cloudInit"`
}

message CloudInitSpec {
	string userData = 1;

	string userDataBase64 = 2;
}

message AccessSpec {
	SshAccessSpec ssh = 1;

	ConsoleAccessSpec console = 2;
}

message SshAccessSpec {
	bool enabled = 1;

	int port = 2;
}

message ConsoleAccessSpec {
	bool vnc = 1;

	bool serial = 2;
}

message GetRequest {
    vink.kubevm.io.apis.types.ResourceType resource_type = 1;
    vink.kubevm.io.apis.types.NamespaceName namespace_name = 2;
}

message ListRequest {
    vink.kubevm.io.apis.types.ResourceType resource_type = 1;
    ListOptions options = 2;
}

message ListResponse {
    repeated string items = 1;
}

message CreateRequest {
    vink.kubevm.io.apis.types.ResourceType resource_type = 1;
    string data = 2;
}

message UpdateRequest {
    vink.kubevm.io.apis.types.ResourceType resource_type = 1;
    string data = 2;
}

message DeleteRequest {
    vink.kubevm.io.apis.types.ResourceType resource_type = 1;
    vink.kubevm.io.apis.types.NamespaceName namespace_name = 2;
}

message ListOptions {
	string label_selector = 1;
	string field_selector = 2;
    // repeated string arbitrary_field_selectors = 3;
	vink.kubevm.io.apis.types.FieldSelectorGroup field_selector_group = 3;
    int32 limit = 4 [(validate.rules).int32.gte = 0];
    string continue = 5;
    string namespace = 6;
}
